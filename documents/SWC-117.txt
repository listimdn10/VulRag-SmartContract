vulnerable code:
pragma solidity ^0.4.24;

contract transaction_malleablity{
 mapping(address => uint256) balances;
 mapping(bytes32 => bool) signatureUsed;

 constructor(address[] owners, uint[] init){
 require(owners.length == init.length);
 for(uint i=0; i < owners.length; i ++){
 balances[owners[i]] = init[i];
 }
 }

 function transfer(
 bytes _signature,
 address _to,
 uint256 _value,
 uint256 _gasPrice,
 uint256 _nonce)
 public
 returns (bool)
 {
 bytes32 txid = keccak256(abi.encodePacked(getTransferHash(_to, _value, _gasPrice, _nonce), _signature));
 require(!signatureUsed[txid]);

 address from = recoverTransferPreSigned(_signature, _to, _value, _gasPrice, _nonce);

 require(balances[from] > _value);
 balances[from] -= _value;
 balances[_to] += _value;

 signatureUsed[txid] = true;
 }

 function recoverTransferPreSigned(
 bytes _sig,
 address _to,
 uint256 _value,
 uint256 _gasPrice,
 uint256 _nonce)
 public
 view
 returns (address recovered)
 {
 return ecrecoverFromSig(getSignHash(getTransferHash(_to, _value, _gasPrice, _nonce)), _sig);
 }

 function getTransferHash(
 address _to,
 uint256 _value,
 uint256 _gasPrice,
 uint256 _nonce)
 public
 view
 returns (bytes32 txHash) {
 return keccak256(address(this), bytes4(0x1296830d), _to, _value, _gasPrice, _nonce);
 }

 function getSignHash(bytes32 _hash)
 public
 pure
 returns (bytes32 signHash)
 {
 return keccak256("\x19Ethereum Signed Message:\n32", _hash);
 }

 function ecrecoverFromSig(bytes32 hash, bytes sig)
 public
 pure
 returns (address recoveredAddress)
 {
 bytes32 r;
 bytes32 s;
 uint8 v;
 if (sig.length != 65) return address(0);
 assembly {
 r := mload(add(sig, 32))
 s := mload(add(sig, 64))
 v := byte(0, mload(add(sig, 96)))
 }
 if (v < 27) {
 v += 27;
 }
 if (v != 27 && v != 28) return address(0);
 return ecrecover(hash, v, r, s);
 }
}


Abstract purpose: Implement a smart contract for handling transactions with the prevention of malleability attacks.

Detail Behaviors: 
1. Initialize balances for multiple owners in the constructor.
2. Transfer funds from one address to another with signature verification and prevention of signature reuse.
3. Recover the address from a given signature for a transfer.
4. Calculate the unique transaction hash for each transfer.
5. Calculate the hash used for signing a message.
6. Recover the address by using the provided signature.

fixed code:
pragma solidity ^0.4.24;

contract transaction_malleablity{
 mapping(address => uint256) balances;
 mapping(bytes32 => bool) signatureUsed;

 constructor(address[] owners, uint[] init){
 require(owners.length == init.length);
 for(uint i=0; i < owners.length; i ++){
 balances[owners[i]] = init[i];
 }
 }

 function transfer(
 bytes _signature,
 address _to,
 uint256 _value,
 uint256 _gasPrice,
 uint256 _nonce)
 public
 returns (bool)
 {
 bytes32 txid = getTransferHash(_to, _value, _gasPrice, _nonce);
 require(!signatureUsed[txid]);

 address from = recoverTransferPreSigned(_signature, _to, _value, _gasPrice, _nonce);

 require(balances[from] > _value);
 balances[from] -= _value;
 balances[_to] += _value;

 signatureUsed[txid] = true;
 }

 function recoverTransferPreSigned(
 bytes _sig,
 address _to,
 uint256 _value,
 uint256 _gasPrice,
 uint256 _nonce)
 public
 view
 returns (address recovered)
 {
 return ecrecoverFromSig(getSignHash(getTransferHash(_to, _value, _gasPrice, _nonce)), _sig);
 }

 function getTransferHash(
 address _to,
 uint256 _value,
 uint256 _gasPrice,
 uint256 _nonce)
 public
 view
 returns (bytes32 txHash) {
 return keccak256(address(this), bytes4(0x1296830d), _to, _value, _gasPrice, _nonce);
 }

 function getSignHash(bytes32 _hash)
 public
 pure
 returns (bytes32 signHash)
 {
 return keccak256("\x19Ethereum Signed Message:\n32", _hash);
 }

 function ecrecoverFromSig(bytes32 hash, bytes sig)
 public
 pure
 returns (address recoveredAddress)
 {
 bytes32 r;
 bytes32 s;
 uint8 v;
 if (sig.length != 65) return address(0);
 assembly {
 r := mload(add(sig, 32))
 s := mload(add(sig, 64))
 v := byte(0, mload(add(sig, 96)))
 }
 if (v < 27) {
 v += 27;
 }
 if (v != 27 && v != 28) return address(0);
 return ecrecover(hash, v, r, s);
 }
}


Abstract Vulnerability Description: Signature Malleability in Ethereum smart contracts allows for different representations of a transaction's signature to be crafted by manipulating its components (`v`, `r`, `s`). This exploit can lead to alternate versions of a signature, enabling replay attacks or transaction duplication by bypassing mechanisms intended to prevent repeated use of the same transaction information in distinct cryptographic forms.

Trigger Action: The vulnerability is triggered by the acceptance and improper handling of multiple valid representations of the same cryptographic signature, leading to the generation of different transaction IDs from identical transaction data.

            Detailed Vulnerability Description: The vulnerability referred to as "Signature Malleability" implies that a malicious actor can manipulate the `v`, `r`, and `s` components of an Ethereum signature to construct different representations of the same signature. This occurs because the EVM allows varying representations of a valid signature due to its acceptance of two public keys deriving from such signatures. Consequently, an adversary can exploit this property to replay a transaction by creating alternate yet valid signature variations, potentially enabling double spending or replay attacks within the smart contract system.

In the original contract code, the transaction ID (`txid`) is generated from a hash that includes both the transaction details and the signature itself. This design flaw means that different valid representations of the signature would result in different transaction IDs, thus bypassing the mechanism that prevents replay attacks by reusing previously used signatures in new transactions.

###
            Solution Description: The modification rectifies the vulnerability by redefining the `txid` to exclude the signature from its computation, ensuring that the transaction hash remains consistent and unique based solely on the transaction's non-redundant attributes such as `_to`, `_value`, `_gasPrice`, and `_nonce`. This adjustment ensures that any deviation in the signature does not produce a different `txid`, hence blocking altered signatures from being reused for replay attacks.

In essence, the specific solution involves the following steps:
1. **Recompute Transaction Hash:** The `txid` is recalculated using only the essential transactional data (`_to`, `_value`, `_gasPrice`, `_nonce`). This strips away the variable component of the signature, making the hash immune to tampering through signature variability.

2. **Secure Signature Usage:** Ensure consistent validation and marking of the transaction ID as used (`signatureUsed[txid] = true;`), thus effectively preventing subsequent transactions from reusing the same transaction details even if a slight alteration to the signature is made.

