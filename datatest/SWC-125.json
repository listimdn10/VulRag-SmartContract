{
    "id": "SWC-125",
    "description": [
        "Solidity supports multiple inheritance, meaning that one contract can inherit several contracts. Multiple inheritance introduces ambiguity calledDiamond Problem: if two or more base contracts define the same function, which one should be called in the child contract? Solidity deals with this ambiguity by using reverseC3 Linearization, which sets a priority between base contracts.",
        "That way, base contracts have different priorities, so the order of inheritance matters. Neglecting inheritance order can lead to unexpected behavior."
    ],
    "MDTCrowdsale.sol": "/*\n * @source: https://github.com/Arachnid/uscc/blob/master/submissions-2017/philipdaian/MDTCrowdsale.sol\n * @author: Philip Daian\n */\n\npragma solidity ^0.4.25;\n\n\n/**\n * @title SafeMath\n * @dev Math operations with safety checks that revert on error\n */\nlibrary SafeMath {\n /**\n    * @dev Multiplies two numbers, reverts on overflow.\n    */\n function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n \n \n \n if (a == 0) {\n return 0;\n }\n\n uint256 c = a * b;\n require(c / a == b);\n\n return c;\n }\n\n /**\n    * @dev Integer division of two numbers truncating the quotient, reverts on division by zero.\n    */\n function div(uint256 a, uint256 b) internal pure returns (uint256) {\n \n require(b > 0);\n uint256 c = a / b;\n \n\n return c;\n }\n\n /**\n    * @dev Subtracts two numbers, reverts on overflow (i.e. if subtrahend is greater than minuend).\n    */\n function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n require(b <= a);\n uint256 c = a - b;\n\n return c;\n }\n\n /**\n    * @dev Adds two numbers, reverts on overflow.\n    */\n function add(uint256 a, uint256 b) internal pure returns (uint256) {\n uint256 c = a + b;\n require(c >= a);\n\n return c;\n }\n\n /**\n    * @dev Divides two numbers and returns the remainder (unsigned integer modulo),\n    * reverts when dividing by zero.\n    */\n function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n require(b != 0);\n return a % b;\n }\n}\n\n\n\n/**\n * @title ERC20 interface\n * @dev see https://github.com/ethereum/EIPs/issues/20\n */\ninterface IERC20 {\n function totalSupply() external view returns (uint256);\n\n function balanceOf(address who) external view returns (uint256);\n\n function allowance(address owner, address spender) external view returns (uint256);\n\n function transfer(address to, uint256 value) external returns (bool);\n\n function approve(address spender, uint256 value) external returns (bool);\n\n function transferFrom(address from, address to, uint256 value) external returns (bool);\n\n event Transfer(address indexed from, address indexed to, uint256 value);\n\n event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n\n/**\n * @title Standard ERC20 token\n *\n * @dev Implementation of the basic standard token.\n * https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20.md\n * Originally based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n *\n * This implementation emits additional Approval events, allowing applications to reconstruct the allowance status for\n * all accounts just by listening to said events. Note that this isn't required by the specification, and other\n * compliant implementations may not do it.\n */\ncontract ERC20 is IERC20 {\n using SafeMath for uint256;\n\n mapping (address => uint256) private _balances;\n\n mapping (address => mapping (address => uint256)) private _allowed;\n\n uint256 private _totalSupply;\n\n /**\n    * @dev Total number of tokens in existence\n    */\n function totalSupply() public view returns (uint256) {\n return _totalSupply;\n }\n\n /**\n    * @dev Gets the balance of the specified address.\n    * @param owner The address to query the balance of.\n    * @return An uint256 representing the amount owned by the passed address.\n    */\n function balanceOf(address owner) public view returns (uint256) {\n return _balances[owner];\n }\n\n /**\n     * @dev Function to check the amount of tokens that an owner allowed to a spender.\n     * @param owner address The address which owns the funds.\n     * @param spender address The address which will spend the funds.\n     * @return A uint256 specifying the amount of tokens still available for the spender.\n     */\n function allowance(address owner, address spender) public view returns (uint256) {\n return _allowed[owner][spender];\n }\n\n /**\n    * @dev Transfer token for a specified address\n    * @param to The address to transfer to.\n    * @param value The amount to be transferred.\n    */\n function transfer(address to, uint256 value) public returns (bool) {\n _transfer(msg.sender, to, value);\n return true;\n }\n\n /**\n     * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n     * Beware that changing an allowance with this method brings the risk that someone may use both the old\n     * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n     * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     * @param spender The address which will spend the funds.\n     * @param value The amount of tokens to be spent.\n     */\n function approve(address spender, uint256 value) public returns (bool) {\n require(spender != address(0));\n\n _allowed[msg.sender][spender] = value;\n emit Approval(msg.sender, spender, value);\n return true;\n }\n\n /**\n     * @dev Transfer tokens from one address to another.\n     * Note that while this function emits an Approval event, this is not required as per the specification,\n     * and other compliant implementations may not emit the event.\n     * @param from address The address which you want to send tokens from\n     * @param to address The address which you want to transfer to\n     * @param value uint256 the amount of tokens to be transferred\n     */\n function transferFrom(address from, address to, uint256 value) public returns (bool) {\n _allowed[from][msg.sender] = _allowed[from][msg.sender].sub(value);\n _transfer(from, to, value);\n emit Approval(from, msg.sender, _allowed[from][msg.sender]);\n return true;\n }\n\n /**\n     * @dev Increase the amount of tokens that an owner allowed to a spender.\n     * approve should be called when allowed_[_spender] == 0. To increment\n     * allowed value is better to use this function to avoid 2 calls (and wait until\n     * the first transaction is mined)\n     * From MonolithDAO Token.sol\n     * Emits an Approval event.\n     * @param spender The address which will spend the funds.\n     * @param addedValue The amount of tokens to increase the allowance by.\n     */\n function increaseAllowance(address spender, uint256 addedValue) public returns (bool) {\n require(spender != address(0));\n\n _allowed[msg.sender][spender] = _allowed[msg.sender][spender].add(addedValue);\n emit Approval(msg.sender, spender, _allowed[msg.sender][spender]);\n return true;\n }\n\n /**\n     * @dev Decrease the amount of tokens that an owner allowed to a spender.\n     * approve should be called when allowed_[_spender] == 0. To decrement\n     * allowed value is better to use this function to avoid 2 calls (and wait until\n     * the first transaction is mined)\n     * From MonolithDAO Token.sol\n     * Emits an Approval event.\n     * @param spender The address which will spend the funds.\n     * @param subtractedValue The amount of tokens to decrease the allowance by.\n     */\n function decreaseAllowance(address spender, uint256 subtractedValue) public returns (bool) {\n require(spender != address(0));\n\n _allowed[msg.sender][spender] = _allowed[msg.sender][spender].sub(subtractedValue);\n emit Approval(msg.sender, spender, _allowed[msg.sender][spender]);\n return true;\n }\n\n /**\n    * @dev Transfer token for a specified addresses\n    * @param from The address to transfer from.\n    * @param to The address to transfer to.\n    * @param value The amount to be transferred.\n    */\n function _transfer(address from, address to, uint256 value) internal {\n require(to != address(0));\n\n _balances[from] = _balances[from].sub(value);\n _balances[to] = _balances[to].add(value);\n emit Transfer(from, to, value);\n }\n\n /**\n     * @dev Internal function that mints an amount of the token and assigns it to\n     * an account. This encapsulates the modification of balances such that the\n     * proper events are emitted.\n     * @param account The account that will receive the created tokens.\n     * @param value The amount that will be created.\n     */\n function _mint(address account, uint256 value) internal {\n require(account != address(0));\n\n _totalSupply = _totalSupply.add(value);\n _balances[account] = _balances[account].add(value);\n emit Transfer(address(0), account, value);\n }\n\n /**\n     * @dev Internal function that burns an amount of the token of a given\n     * account.\n     * @param account The account whose tokens will be burnt.\n     * @param value The amount that will be burnt.\n     */\n function _burn(address account, uint256 value) internal {\n require(account != address(0));\n\n _totalSupply = _totalSupply.sub(value);\n _balances[account] = _balances[account].sub(value);\n emit Transfer(account, address(0), value);\n }\n\n /**\n     * @dev Internal function that burns an amount of the token of a given\n     * account, deducting from the sender's allowance for said account. Uses the\n     * internal burn function.\n     * Emits an Approval event (reflecting the reduced allowance).\n     * @param account The account whose tokens will be burnt.\n     * @param value The amount that will be burnt.\n     */\n function _burnFrom(address account, uint256 value) internal {\n _allowed[account][msg.sender] = _allowed[account][msg.sender].sub(value);\n _burn(account, value);\n emit Approval(account, msg.sender, _allowed[account][msg.sender]);\n }\n}\n\n/**\n * @title Roles\n * @dev Library for managing addresses assigned to a Role.\n */\nlibrary Roles {\n struct Role {\n mapping (address => bool) bearer;\n }\n\n /**\n     * @dev give an account access to this role\n     */\n function add(Role storage role, address account) internal {\n require(account != address(0));\n require(!has(role, account));\n\n role.bearer[account] = true;\n }\n\n /**\n     * @dev remove an account's access to this role\n     */\n function remove(Role storage role, address account) internal {\n require(account != address(0));\n require(has(role, account));\n\n role.bearer[account] = false;\n }\n\n /**\n     * @dev check if an account has this role\n     * @return bool\n     */\n function has(Role storage role, address account) internal view returns (bool) {\n require(account != address(0));\n return role.bearer[account];\n }\n}\n\ncontract MinterRole {\n using Roles for Roles.Role;\n\n event MinterAdded(address indexed account);\n event MinterRemoved(address indexed account);\n\n Roles.Role private _minters;\n\n constructor () internal {\n _addMinter(msg.sender);\n }\n\n modifier onlyMinter() {\n require(isMinter(msg.sender));\n _;\n }\n\n function isMinter(address account) public view returns (bool) {\n return _minters.has(account);\n }\n\n function addMinter(address account) public onlyMinter {\n _addMinter(account);\n }\n\n function renounceMinter() public {\n _removeMinter(msg.sender);\n }\n\n function _addMinter(address account) internal {\n _minters.add(account);\n emit MinterAdded(account);\n }\n\n function _removeMinter(address account) internal {\n _minters.remove(account);\n emit MinterRemoved(account);\n }\n}\n\n/**\n * @title ERC20Mintable\n * @dev ERC20 minting logic\n */\ncontract ERC20Mintable is ERC20, MinterRole {\n /**\n     * @dev Function to mint tokens\n     * @param to The address that will receive the minted tokens.\n     * @param value The amount of tokens to mint.\n     * @return A boolean that indicates if the operation was successful.\n     */\n function mint(address to, uint256 value) public onlyMinter returns (bool) {\n _mint(to, value);\n return true;\n }\n}\n/**\n * @title Crowdsale\n * @dev Crowdsale is a base contract for managing a token crowdsale.\n * Crowdsales have a start and end block, where investors can make\n * token purchases and the crowdsale will assign them tokens based\n * on a token per ETH rate. Funds collected are forwarded to a wallet\n * as they arrive.\n */\ncontract Crowdsale {\n using SafeMath for uint256;\n\n \n ERC20Mintable public token;\n\n \n uint256 public startBlock;\n uint256 public endBlock;\n\n \n address public wallet;\n\n \n uint256 public rate;\n\n \n uint256 public weiRaised;\n\n /**\n    * event for token purchase logging\n    * @param purchaser who paid for the tokens\n    * @param beneficiary who got the tokens\n    * @param value weis paid for purchase\n    * @param amount amount of tokens purchased\n    */\n event TokenPurchase(address indexed purchaser, address indexed beneficiary, uint256 value, uint256 amount);\n\n function Crowdsale(uint256 _startBlock, uint256 _endBlock, uint256 _rate, address _wallet) {\n require(_startBlock >= block.number);\n require(_endBlock >= _startBlock);\n require(_rate > 0);\n require(_wallet != 0x0);\n\n token = createTokenContract();\n startBlock = _startBlock;\n endBlock = _endBlock;\n rate = _rate;\n wallet = _wallet;\n }\n\n \n \n function createTokenContract() internal returns (ERC20Mintable) {\n return new ERC20Mintable();\n }\n\n\n \n function () payable {\n buyTokens(msg.sender);\n }\n\n \n function buyTokens(address beneficiary) payable {\n require(beneficiary != 0x0);\n require(validPurchase());\n\n uint256 weiAmount = msg.value;\n\n \n uint256 tokens = weiAmount.mul(rate);\n\n \n weiRaised = weiRaised.add(weiAmount);\n\n token.mint(beneficiary, tokens);\n TokenPurchase(msg.sender, beneficiary, weiAmount, tokens);\n\n forwardFunds();\n }\n\n \n \n function forwardFunds() internal {\n wallet.transfer(msg.value);\n }\n\n \n function validPurchase() internal constant returns (bool) {\n uint256 current = block.number;\n bool withinPeriod = current >= startBlock && current <= endBlock;\n bool nonZeroPurchase = msg.value != 0;\n return withinPeriod && nonZeroPurchase;\n }\n\n \n function hasEnded() public constant returns (bool) {\n return block.number > endBlock;\n }\n}\n\n/**\n * @title CappedCrowdsale\n * @dev Extension of Crowsdale with a max amount of funds raised\n */\n contract CappedCrowdsale is Crowdsale {\n using SafeMath for uint256;\n uint256 public cap;\n\n function CappedCrowdsale(uint256 _cap) {\n require(_cap > 0);\n cap = _cap;\n }\n\n \n \n function validPurchase() internal constant returns (bool) {\n bool withinCap = weiRaised.add(msg.value) <= cap;\n return super.validPurchase() && withinCap;\n }\n\n \n \n function hasEnded() public constant returns (bool) {\n bool capReached = weiRaised >= cap;\n return super.hasEnded() || capReached;\n }\n}\n\n/**\n * @title WhitelistedCrowdsale\n * @dev Extension of Crowsdale with a whitelist of investors that\n * can buy before the start block\n */\ncontract WhitelistedCrowdsale is Crowdsale {\n using SafeMath for uint256;\n\n mapping (address => bool) public whitelist;\n\n function addToWhitelist(address addr) {\n require(msg.sender != address(this));\n whitelist[addr] = true;\n }\n\n \n \n function validPurchase() internal constant returns (bool) {\n return super.validPurchase() || (whitelist[msg.sender] && !hasEnded());\n }\n\n}\n\ncontract MDTCrowdsale is CappedCrowdsale, WhitelistedCrowdsale {\n\n function MDTCrowdsale()\n CappedCrowdsale(50000000000000000000000)\n Crowdsale(block.number, block.number + 100000, 1, msg.sender) { \n addToWhitelist(msg.sender);\n addToWhitelist(0x0d5bda9db5dd36278c6a40683960ba58cac0149b);\n addToWhitelist(0x1b6ddc637c24305b354d7c337f9126f68aad4886);\n }\n\n}\n",
    "MDTCrowdsale_fixed.sol": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.20;\n\ncontract CustomToken {\n    string public name = \"MyToken\";\n    string public symbol = \"MTK\";\n    uint8 public decimals = 18;\n    uint256 public totalSupply;\n    address public owner;\n\n    mapping(address => uint256) public balanceOf;\n    mapping(address => mapping(address => uint256)) public allowance;\n\n    event Transfer(address indexed from, address indexed to, uint256 value);\n    event Approval(\n        address indexed owner,\n        address indexed spender,\n        uint256 value\n    );\n\n    constructor(uint256 initialSupply) {\n        owner = msg.sender;\n        totalSupply = initialSupply * 10 ** uint256(decimals);\n        balanceOf[owner] = totalSupply;\n    }\n\n    modifier onlyOwner() {\n        require(msg.sender == owner, \"Not owner\");\n        _;\n    }\n\n    function transfer(address to, uint256 value) public returns (bool) {\n        require(balanceOf[msg.sender] >= value, \"Not enough balance\");\n        balanceOf[msg.sender] -= value;\n        balanceOf[to] += value;\n        emit Transfer(msg.sender, to, value);\n        return true;\n    }\n\n    function approve(address spender, uint256 value) public returns (bool) {\n        allowance[msg.sender][spender] = value;\n        emit Approval(msg.sender, spender, value);\n        return true;\n    }\n\n    function transferFrom(\n        address from,\n        address to,\n        uint256 value\n    ) public returns (bool) {\n        require(balanceOf[from] >= value, \"Not enough balance\");\n        require(allowance[from][msg.sender] >= value, \"Not approved\");\n        balanceOf[from] -= value;\n        balanceOf[to] += value;\n        allowance[from][msg.sender] -= value;\n        emit Transfer(from, to, value);\n        return true;\n    }\n}\n\ncontract Crowdsale {\n    address payable public wallet;\n    CustomToken public token;\n    address public owner;\n\n    struct Stage {\n        uint256 rate;\n        uint256 cap;\n        uint256 sold;\n    }\n\n    mapping(uint8 => Stage) public stages;\n    uint8 public currentStage;\n    mapping(address => bool) public whitelisted;\n    mapping(address => uint256) public contributions;\n\n    bool public saleActive = false;\n\n    event TokensPurchased(address indexed buyer, uint256 amount);\n    event StageChanged(uint8 newStage);\n    event Whitelisted(address indexed investor, bool status);\n\n    constructor(uint256 initialSupply, address payable _wallet) {\n        token = new CustomToken(initialSupply);\n        wallet = _wallet;\n        owner = msg.sender;\n\n        stages[1] = Stage({rate: 1000, cap: 50 ether, sold: 0});\n        stages[2] = Stage({rate: 800, cap: 100 ether, sold: 0});\n        stages[3] = Stage({rate: 600, cap: 200 ether, sold: 0});\n\n        currentStage = 1;\n    }\n\n    modifier onlyOwner() {\n        require(msg.sender == owner, \"Not owner\");\n        _;\n    }\n\n    modifier onlyWhitelisted() {\n        require(whitelisted[msg.sender], \"Not whitelisted\");\n        _;\n    }\n\n    function whitelistInvestor(\n        address investor,\n        bool status\n    ) external onlyOwner {\n        whitelisted[investor] = status;\n        emit Whitelisted(investor, status);\n    }\n\n    function buyTokens() external payable onlyWhitelisted {\n        require(saleActive, \"Sale is not active\");\n        require(currentStage > 0, \"No active stage\");\n\n        Stage storage stage = stages[currentStage];\n        require(stage.sold + msg.value <= stage.cap, \"Stage cap reached\");\n\n        uint256 tokens = msg.value * stage.rate;\n        require(token.balanceOf(address(this)) >= tokens, \"Not enough tokens\");\n\n        stage.sold += msg.value;\n        contributions[msg.sender] += msg.value;\n\n        token.transfer(msg.sender, tokens);\n        wallet.transfer(msg.value);\n\n        emit TokensPurchased(msg.sender, tokens);\n    }\n\n    function setSaleStatus(bool status) external onlyOwner {\n        saleActive = status;\n    }\n\n    function nextStage() external onlyOwner {\n        require(currentStage < 3, \"No more stages\");\n        currentStage++;\n        emit StageChanged(currentStage);\n    }\n\n    function withdrawTokens(\n        address recipient,\n        uint256 amount\n    ) external onlyOwner {\n        require(token.balanceOf(address(this)) >= amount, \"Not enough tokens\");\n        token.transfer(recipient, amount);\n    }\n}\n"
}