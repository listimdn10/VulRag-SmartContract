{
    "id": "SWC-110",
    "description": [
        "The Solidity assert() function is meant to assert invariants. Properly functioning code should never reach a failing assert statement. A reachable assertion can mean one of two things:"
    ],
    "sha_of_sha_2_mappings.sol": "/*\n * @source: ChainSecurity\n * @author: Anton Permenev\n */\npragma solidity ^0.4.22;\n\ncontract ShaOfSha2Mappings{\n\n mapping(bytes32=>uint) m;\n mapping(bytes32=>uint) n;\n\n constructor(){\n m[keccak256(abi.encode(\"AAA\", msg.sender))] = 100;\n }\n\n function check(address a){\n assert(n[keccak256(abi.encode(\"BBB\", a))] == 0);\n }\n\n}\n",
    "sha_of_sha_2_mappings_fixed.sol": "/*\n * @source: ChainSecurity\n * @author: Anton Permenev\n */\npragma solidity ^0.4.22;\n\ncontract ShaOfSha2Mappings{\n\n mapping(bytes32=>uint) m;\n mapping(bytes32=>uint) n;\n\n constructor(){\n m[keccak256(abi.encode(\"AAA\", msg.sender))] = 100;\n }\n\n function check(address a) public {\n require(n[keccak256(abi.encode(\"BBB\", a))] == 0, \"Mapping value is not zero!\");\n }\n\n}\n"

}