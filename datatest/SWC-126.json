{
    "id": "SWC-126",
    "description": [
        "Insufficient gas griefing attacks can be performed on contracts which accept data and use it in a sub-call on another contract. If the sub-call fails, either the whole transaction is reverted, or execution is continued. In the case of a relayer contract, the user who executes the transaction, the 'forwarder', can effectively censor transactions by using just enough gas to execute the transaction, but not enough for the sub-call to succeed."
    ],
    "relayer.sol": "/*\n * @source: https://consensys.github.io/smart-contract-best-practices/known_attacks/#insufficient-gas-griefing\n * @author: ConsenSys Diligence\n * Modified by Kaden Zipfel\n */\n\npragma solidity ^0.5.0;\n\ncontract Relayer {\n uint transactionId;\n\n struct Tx {\n bytes data;\n bool executed;\n }\n\n mapping (uint => Tx) transactions;\n\n function relay(Target target, bytes memory _data) public returns(bool) {\n \n require(transactions[transactionId].executed == false, 'same transaction twice');\n transactions[transactionId].data = _data;\n transactions[transactionId].executed = true;\n transactionId += 1;\n\n (bool success, ) = address(target).call(abi.encodeWithSignature(\"execute(bytes)\", _data));\n return success;\n }\n}\n\n\ncontract Target {\n function execute(bytes memory _data) public {\n \n }\n}\n",
    "relayer_fixed.sol": "/*\n * @source: https://consensys.github.io/smart-contract-best-practices/known_attacks/#insufficient-gas-griefing\n * @author: ConsenSys Diligence\n * Modified by Kaden Zipfel\n */\n\npragma solidity ^0.5.0;\n\ncontract Relayer {\n uint transactionId;\n\n struct Tx {\n bytes data;\n bool executed;\n }\n\n mapping (uint => Tx) transactions;\n\n function relay(Target target, bytes memory _data, uint _gasLimit) public {\n \n require(transactions[transactionId].executed == false, 'same transaction twice');\n transactions[transactionId].data = _data;\n transactions[transactionId].executed = true;\n transactionId += 1;\n\n address(target).call(abi.encodeWithSignature(\"execute(bytes)\", _data, _gasLimit));\n }\n}\n\n\ncontract Target {\n function execute(bytes memory _data, uint _gasLimit) public {\n require(gasleft() >= _gasLimit, 'not enough gas');\n \n }\n}\n"
}