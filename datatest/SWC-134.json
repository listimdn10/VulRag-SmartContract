{
    "id": "SWC-134",
    "description": [
        "The transfer() and send()functions forward a fixed amount of 2300 gas. Historically, it has often been recommended to use these functions for value transfers to guard against reentrancy attacks. However, the gas cost of EVM instructions may change significantly during hard forks which may break already deployed contract systems that make fixed assumptions about gas costs.  For example.EIP 1884broke several existing smart contracts due to a cost increase of the SLOAD instruction."
    ],
    "hardcoded_gas_limits.sol": "/*\n * @author: Bernhard Mueller (ConsenSys / MythX)\n */\n\npragma solidity 0.6.4;\n\ninterface ICallable {\n function callMe() external;\n}\n\ncontract HardcodedNotGood {\n\n address payable _callable = 0xaAaAaAaaAaAaAaaAaAAAAAAAAaaaAaAaAaaAaaAa;\n ICallable callable = ICallable(_callable);\n\n constructor() public payable {\n }\n\n function doTransfer(uint256 amount) public {\n _callable.transfer(amount);\n }\n\n function doSend(uint256 amount) public {\n _callable.send(amount);\n }\n\n function callLowLevel() public {\n _callable.call.value(0).gas(10000)(\"\");\n }\n\n function callWithArgs() public {\n callable.callMe{gas: 10000}();\n }\n}\n",
    "hardcoded_gas_limits_fixed.sol": "/*\n * @author: Updated Solidity Code\n * @fix: Removed transfer() and send(), replaced with .call() with require(success, ...)\n */\n\n// SPDX-License-Identifier: MIT\npragma solidity 0.6.4;\n\ninterface ICallable {\n    function callMe() external;\n}\n\ncontract HardcodedNotGood {\n    address payable private _callable = 0xaAaAaAaaAaAaAaaAaAAAAAAAAaaaAaAaAaaAaaAa;\n    ICallable private callable = ICallable(_callable);\n\n    constructor() public payable {}\n\n    function doTransfer(uint256 amount) public {\n        (bool success, ) = _callable.call{value: amount}(\"\"); // ✅ Use .call() instead of transfer/send\n        require(success, \"Transfer failed\");\n    }\n\n    function doSend(uint256 amount) public {\n        (bool success, ) = _callable.call{value: amount}(\"\"); // ✅ Check return value\n        require(success, \"Send failed\");\n    }\n\n    function callLowLevel() public {\n        (bool success, ) = _callable.call{gas: 10000, value: 0}(\"\"); // ✅ Check return value\n        require(success, \"Low-level call failed\");\n    }\n\n    function callWithArgs() public {\n        (bool success, ) = address(callable).call{gas: 10000}(\n            abi.encodeWithSignature(\"callMe()\")\n        ); // ✅ Safe low-level call\n        require(success, \"callWithArgs failed\");\n    }\n}\n"
}