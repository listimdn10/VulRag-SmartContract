{
    "id": "SWC-124",
    "description": [
        "A smart contract's data (e.g., storing the owner of the contract) is persistently stored\nat some storage location (i.e., a key or address) on the EVM level. The contract is\nresponsible for ensuring that only authorized user or contract accounts may write to\nsensitive storage locations. If an attacker is able to write to arbitrary storage\nlocations of a contract, the authorization checks may easily be circumvented. This can\nallow an attacker to corrupt the storage; for instance, by overwriting a field that stores\nthe address of the contract owner."
    ],
    "arbitrary_location_write_simple.sol": "pragma solidity ^0.4.25;\n\ncontract Wallet {\n uint[] private bonusCodes;\n address private owner;\n\n constructor() public {\n bonusCodes = new uint[](0);\n owner = msg.sender;\n }\n\n function () public payable {\n }\n\n function PushBonusCode(uint c) public {\n bonusCodes.push(c);\n }\n\n function PopBonusCode() public {\n require(0 <= bonusCodes.length);\n bonusCodes.length--;\n }\n\n function UpdateBonusCodeAt(uint idx, uint c) public {\n require(idx < bonusCodes.length);\n bonusCodes[idx] = c;\n }\n\n function Destroy() public {\n require(msg.sender == owner);\n selfdestruct(msg.sender);\n }\n}\n",
    "arbitrary_location_write_simple_fixed.sol": "pragma solidity ^0.4.25;\n\ncontract Wallet {\n uint[] private bonusCodes;\n address private owner;\n\n constructor() public {\n bonusCodes = new uint[](0);\n owner = msg.sender;\n }\n\n function () public payable {\n }\n\n function PushBonusCode(uint c) public {\n bonusCodes.push(c);\n }\n\n function PopBonusCode() public {\n require(0 < bonusCodes.length);\n bonusCodes.length--;\n }\n\n function UpdateBonusCodeAt(uint idx, uint c) public {\n require(idx < bonusCodes.length); \n bonusCodes[idx] = c;\n }\n\n function Destroy() public {\n require(msg.sender == owner);\n selfdestruct(msg.sender);\n }\n}\n"
}