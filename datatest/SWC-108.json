{
    "id": "SWC-108",
    "description": [
        "Labeling the visibility explicitly makes it easier to catch incorrect assumptions about who can access the variable."
    ],
    "storage.sol": "pragma solidity 0.4.24;\n\ncontract TestStorage {\n\n uint storeduint1 = 15;\n uint constant constuint = 16;\n uint32 investmentsDeadlineTimeStamp = uint32(now);\n\n bytes16 string1 = \"test1\";\n bytes32 private string2 = \"test1236\";\n string public string3 = \"lets string something\";\n\n mapping (address => uint) public uints1;\n mapping (address => DeviceData) structs1;\n\n uint[] uintarray;\n DeviceData[] deviceDataArray;\n\n struct DeviceData {\n string deviceBrand;\n string deviceYear;\n string batteryWearLevel;\n }\n\n function testStorage() public {\n address address1 = 0xbccc714d56bc0da0fd33d96d2a87b680dd6d0df6;\n address address2 = 0xaee905fdd3ed851e48d22059575b9f4245a82b04;\n\n uints1[address1] = 88;\n uints1[address2] = 99;\n\n DeviceData memory dev1 = DeviceData(\"deviceBrand\", \"deviceYear\", \"wearLevel\");\n\n structs1[address1] = dev1;\n\n uintarray.push(8000);\n uintarray.push(9000);\n\n deviceDataArray.push(dev1);\n }\n}\n",
    "storage_fixed.sol": "pragma solidity 0.4.24;\n\ncontract TestStorage {\n\n    uint public storeduint1 = 15; // Explicitly labeled as public\n    uint constant constuint = 16; // Constants do not need visibility\n    uint32 public investmentsDeadlineTimeStamp = uint32(now); // Explicitly labeled as public\n\n    bytes16 public string1 = \"test1\"; // Explicitly labeled as public\n    bytes32 private string2 = \"test1236\"; // Already private\n    string public string3 = \"lets string something\"; // Already public\n\n    mapping (address => uint) public uints1; // Already public\n    mapping (address => DeviceData) private structs1; // Explicitly labeled as private\n\n    uint[] private uintarray; // Explicitly labeled as private\n    DeviceData[] private deviceDataArray; // Explicitly labeled as private\n\n    struct DeviceData {\n        string deviceBrand;\n        string deviceYear;\n        string batteryWearLevel;\n    }\n\n    function testStorage() public {\n        address address1 = 0xbccc714d56bc0da0fd33d96d2a87b680dd6d0df6;\n        address address2 = 0xaee905fdd3ed851e48d22059575b9f4245a82b04;\n\n        uints1[address1] = 88;\n        uints1[address2] = 99;\n\n        DeviceData memory dev1 = DeviceData(\"deviceBrand\", \"deviceYear\", \"wearLevel\");\n\n        structs1[address1] = dev1;\n\n        uintarray.push(8000);\n        uintarray.push(9000);\n\n        deviceDataArray.push(dev1);\n    }\n}\n"
}