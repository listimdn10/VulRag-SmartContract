{
    "id": "SWC-101",
    "description": [
        "An overflow/underflow happens when an arithmetic operation reaches the maximum or minimum size of a type. For instance if a number is stored in the uint8 type, it means that the number is stored in a 8 bits unsigned number ranging from 0 to 2^8-1. In computer programming, an integer overflow occurs when an arithmetic operation attempts to create a numeric value that is outside of the range that can be represented with a given number of bits â€“ either larger than the maximum or lower than the minimum representable value."
    ],
    "overflow_simple_add.sol": "pragma solidity 0.4.24;\n\ncontract Overflow_Add {\n uint public balance = 1;\n\n function add(uint256 deposit) public {\n balance += deposit;\n }\n}\n",
    "overflow_simple_add_fixed.sol": "pragma solidity ^0.4.24;\n\ncontract Overflow_Add {\n uint public balance = 1;\n\n function add(uint256 deposit) public {\n balance = add(balance, deposit);\n }\n\n \n function add(uint256 a, uint256 b) internal pure returns (uint256) {\n uint256 c = a + b;\n require(c >= a);\n\n return c;\n }\n}\n"
}