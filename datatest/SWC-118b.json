{
    "id": "SWC-118",
    "description": [
        "Constructors are special functions that are called only once during the contract creation. They often perform critical, privileged actions such as setting the owner of the contract. Before Solidity version 0.4.22, the only way of defining a constructor was to create a function with the same name as the contract class containing it. A function meant to become a constructor becomes a normal, callable function if its name doesn't exactly match the contract name.\nThis behavior sometimes leads to security issues, in particular when smart contract code is re-used with a different name but the name of the constructor function is not changed accordingly."
    ],
    "incorrect_constructor_name2.sol": "/*\n * @source: https://github.com/trailofbits/not-so-smart-contracts/blob/master/wrong_constructor_name/incorrect_constructor.sol\n * @author: Ben Perez\n * Modified by Gerhard Wagner\n */\n\npragma solidity 0.4.24;\n\ncontract Missing{\n address private owner;\n\n modifier onlyowner {\n require(msg.sender==owner);\n _;\n }\n\n function Constructor()\n public\n {\n owner = msg.sender;\n }\n\n function () payable {}\n\n function withdraw()\n public\n onlyowner\n {\n owner.transfer(this.balance);\n }\n\n}\n",
    "incorrect_constructor_name2_fixed.sol": "/*\n * @source: https://github.com/trailofbits/not-so-smart-contracts/blob/master/wrong_constructor_name/incorrect_constructor.sol\n * @author: Ben Perez\n * Modified by Gerhard Wagner\n */\n\npragma solidity ^0.4.24;\n\ncontract Missing{\n address private owner;\n\n modifier onlyowner {\n require(msg.sender==owner);\n _;\n }\n\n constructor()\n public\n {\n owner = msg.sender;\n }\n\n function () payable {}\n\n function withdraw()\n public\n onlyowner\n {\n owner.transfer(this.balance);\n }\n\n}\n"
}