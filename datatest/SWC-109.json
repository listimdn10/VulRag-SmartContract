{
    "id": "SWC-109",
    "description": [
        "Uninitialized local storage variables can point to unexpected storage locations in the contract, which can lead to intentional or unintentional vulnerabilities."
    ],
    "crypto_roulette.sol": "/*\n * @source: https://github.com/thec00n/smart-contract-honeypots/blob/master/CryptoRoulette.sol\n */\npragma solidity ^0.4.19;\n\n\n\n\n\n\n\n\ncontract CryptoRoulette {\n\n uint256 private secretNumber;\n uint256 public lastPlayed;\n uint256 public betPrice = 0.1 ether;\n address public ownerAddr;\n\n struct Game {\n address player;\n uint256 number;\n }\n Game[] public gamesPlayed;\n\n function CryptoRoulette() public {\n ownerAddr = msg.sender;\n shuffle();\n }\n\n function shuffle() internal {\n \n secretNumber = uint8(sha3(now, block.blockhash(block.number-1))) % 20 + 1;\n }\n\n function play(uint256 number) payable public {\n require(msg.value >= betPrice && number <= 10);\n\n Game game;\n game.player = msg.sender;\n game.number = number;\n gamesPlayed.push(game);\n\n if (number == secretNumber) {\n \n msg.sender.transfer(this.balance);\n }\n\n shuffle();\n lastPlayed = now;\n }\n\n function kill() public {\n if (msg.sender == ownerAddr && now > lastPlayed + 1 days) {\n suicide(msg.sender);\n }\n }\n\n function() public payable { }\n}\n",
    "crypto_roulette_fixed.sol": "/*\n * @source: https://github.com/thec00n/smart-contract-honeypots/blob/master/CryptoRoulette.sol\n */\npragma solidity ^0.4.19;\n\n\n\n\n\n\n\n\ncontract CryptoRoulette {\n\n uint256 private secretNumber;\n uint256 public lastPlayed;\n uint256 public betPrice = 0.1 ether;\n address public ownerAddr;\n\n struct Game {\n address player;\n uint256 number;\n }\n Game[] public gamesPlayed;\n\n function CryptoRoulette() public {\n ownerAddr = msg.sender;\n shuffle();\n }\n\n function shuffle() internal {\n \n secretNumber = uint8(sha3(now, block.blockhash(block.number-1))) % 20 + 1;\n }\n\n function play(uint256 number) payable public {\n require(msg.value >= betPrice && number <= 10);\n\n Game memory game;\n game.player = msg.sender;\n game.number = number;\n gamesPlayed.push(game);\n\n if (number == secretNumber) {\n \n msg.sender.transfer(this.balance);\n }\n\n shuffle();\n lastPlayed = now;\n }\n\n function kill() public {\n if (msg.sender == ownerAddr && now > lastPlayed + 1 days) {\n suicide(msg.sender);\n }\n }\n\n function() public payable { }\n}\n"
}