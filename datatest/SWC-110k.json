{
    "id": "SWC-110",
    "description": [
        "The Solidity assert() function is meant to assert invariants. Properly functioning code should never reach a failing assert statement. A reachable assertion can mean one of two things:"
    ],
    "runtime_create_user_input.sol": "/*\n * @source: ChainSecurity\n * @author: Anton Permenev\n */\npragma solidity ^0.4.22;\n\ncontract RuntimeCreateUserInput{\n\n function check(uint x){\n B b = new B(x);\n assert(b.foo() == 10);\n }\n\n}\n\ncontract B{\n\n uint x_;\n constructor(uint x){\n x_ = x;\n }\n\n function foo() returns(uint){\n return x_;\n }\n\n}\n",
    "runtime_create_user_input_fixed.sol": "/*\n * @source: ChainSecurity\n * @author: Anton Permenev\n */\npragma solidity ^0.4.22;\n\ncontract RuntimeCreateUserInput {\n    function check(uint x) public {\n        B b = new B(x);\n        require(b.foo() == 10, \"Value must be 10!\");\n    }\n}\n\ncontract B{\n\n uint x_;\n constructor(uint x) public {\n x_ = x;\n }\n\n function foo() public returns(uint){\n return x_;\n }\n\n}\n"

}