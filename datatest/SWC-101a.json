{
    "id": "SWC-101",
    "description": [
        "An overflow/underflow happens when an arithmetic operation reaches the maximum or minimum size of a type. For instance if a number is stored in the uint8 type, it means that the number is stored in a 8 bits unsigned number ranging from 0 to 2^8-1. In computer programming, an integer overflow occurs when an arithmetic operation attempts to create a numeric value that is outside of the range that can be represented with a given number of bits â€“ either larger than the maximum or lower than the minimum representable value."
    ],
    "integer_overflow_mapping_sym_1.sol": "\n\npragma solidity ^0.4.11;\n\ncontract IntegerOverflowMappingSym1 {\n mapping(uint256 => uint256) map;\n\n function init(uint256 k, uint256 v) public {\n map[k] -= v;\n }\n}\n",
    "integer_overflow_mapping_sym_1_fixed.sol": "\n\n\npragma solidity ^0.4.16;\n\ncontract IntegerOverflowMappingSym1 {\n mapping(uint256 => uint256) map;\n\n function init(uint256 k, uint256 v) public {\n map[k] = sub(map[k], v);\n }\n\n \n function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n require(b <= a);\n return a - b;\n }\n}\n"
}