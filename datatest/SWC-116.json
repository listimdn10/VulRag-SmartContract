{
    "id": "SWC-116",
    "description": [
        "Contracts often need access to time values to perform certain types of functionality. Values such asblock.timestamp, andblock.numbercan give you a sense of the current time or a time delta, however, they are not safe to use for most purposes.",
        "In the case ofblock.timestamp, developers often attempt to use it to trigger time-dependent events. As Ethereum is decentralized, nodes can synchronize time only to some degree. Moreover, malicious miners can alter the timestamp of their blocks, especially if they can gain advantages by doing so. However, miners can't set a timestamp smaller than the previous one (otherwise the block will be rejected), nor can they set the timestamp too far ahead in the future. Taking all of the above into consideration, developers can't rely on the preciseness of the provided timestamp.",
        "As forblock.number, considering the block time on Ethereum is generally about 14 seconds, it's possible to predict the time delta between blocks. However, block times are not constant and are subject to change for a variety of reasons, e.g. fork reorganisations and the difficulty bomb. Due to variable block times,block.numbershould also not be relied on for precise calculations of time."
    ],
    "time_lock.sol": "/*\n * @author: Kaden Zipfel\n */\n\npragma solidity ^0.5.0;\n\ncontract TimeLock {\n struct User {\n uint amount; \n uint unlockBlock; \n }\n\n mapping(address => User) private users;\n\n \n function lockEth(uint _time, uint _amount) public payable {\n require(msg.value == _amount, 'must send exact amount');\n users[msg.sender].unlockBlock = block.number + (_time / 14);\n users[msg.sender].amount = _amount;\n }\n\n \n function withdraw() public {\n require(users[msg.sender].amount > 0, 'no amount locked');\n require(block.number >= users[msg.sender].unlockBlock, 'lock period not over');\n\n uint amount = users[msg.sender].amount;\n users[msg.sender].amount = 0;\n (bool success, ) = msg.sender.call.value(amount)(\"\");\n require(success, 'transfer failed');\n }\n}\n",
    "timed_crowdsale.sol": "pragma solidity ^0.5.0;\n\ncontract TimedCrowdsale {\n\n event Finished();\n event notFinished();\n\n \n function isSaleFinished() private returns (bool) {\n return block.timestamp >= 1546300800;\n }\n\n function run() public {\n if (isSaleFinished()) {\n emit Finished();\n } else {\n emit notFinished();\n }\n }\n\n}\n"
}