{
    "id": "SWC-101",
    "description": [
        "An overflow/underflow happens when an arithmetic operation reaches the maximum or minimum size of a type. For instance if a number is stored in the uint8 type, it means that the number is stored in a 8 bits unsigned number ranging from 0 to 2^8-1. In computer programming, an integer overflow occurs when an arithmetic operation attempts to create a numeric value that is outside of the range that can be represented with a given number of bits â€“ either larger than the maximum or lower than the minimum representable value."
    ],
    "integer_overflow_multitx_onefunc_infeasible.sol": "/*\n * @source: https://github.com/ConsenSys/evm-analyzer-benchmark-suite\n * @author: Suhabe Bugrara\n */\n\n\n\n\npragma solidity ^0.4.23;\n\ncontract IntegerOverflowMultiTxOneFuncInfeasible {\n uint256 private initialized = 0;\n uint256 public count = 1;\n\n function run(uint256 input) public {\n if (initialized == 0) {\n return;\n }\n\n count -= input;\n }\n}\n",
    "integer_overflow_multitx_onefunc_infeasible_fixed.sol": "/*\n * @source: https://github.com/ConsenSys/evm-analyzer-benchmark-suite\n * @author: Suhabe Bugrara\n * @fix: Prevent integer underflow in run() function\n */\n\npragma solidity ^0.4.23;\n\nlibrary SafeMath {\n function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n require(b <= a, \"Integer underflow\");\n return a - b;\n }\n}\n\ncontract IntegerOverflowMultiTxOneFuncInfeasible {\n using SafeMath for uint256;\n\n uint256 private initialized = 0;\n uint256 public count = 1;\n\n function run(uint256 input) public {\n if (initialized == 0) {\n return;\n }\n\n count = count.sub(input);\n }\n}\n"
}