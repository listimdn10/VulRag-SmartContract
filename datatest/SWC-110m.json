{
    "id": "SWC-110",
    "description": [
        "The Solidity assert() function is meant to assert invariants. Properly functioning code should never reach a failing assert statement. A reachable assertion can mean one of two things:"
    ],
    "sha_of_sha_collision.sol": "/*\n * @source: ChainSecurity\n * @author: Anton Permenev\n * Assert violation with 2 message calls:\n * - set(66)\n * - check(0x4100000000000000000000000000000000000000000000000000000000000000)\n */\npragma solidity ^0.4.22;\n\ncontract ShaOfShaCollission{\n\n mapping(bytes32=>uint) m;\n\n function set(uint x){\n m[keccak256(abi.encodePacked(\"A\", x))] = 1;\n }\n function check(uint x){\n assert(m[keccak256(abi.encodePacked(x, \"B\"))] == 0);\n }\n\n}\n",
  
    "sha_of_sha_collision_fixed.sol": "/*\n * @source: ChainSecurity\n * @author: Anton Permenev\n * Fixed version replacing assert() with require().\n */\npragma solidity ^0.4.22;\n\ncontract ShaOfShaCollission {\n\n    mapping(bytes32 => uint) m;\n\n    function set(uint x) public {\n        m[keccak256(abi.encodePacked(\"A\", x))] = 1;\n    }\n\n    function check(uint x) public {\n        require(m[keccak256(abi.encodePacked(x, \"B\"))] == 0, \"Condition failed\");\n    }\n}"


}