{
    "id": "SWC-110",
    "description": [
        "The Solidity assert() function is meant to assert invariants. Properly functioning code should never reach a failing assert statement. A reachable assertion can mean one of two things:"
    ],
    "return_memory.sol": "/*\n * @source: https://forum.zeppelin.solutions/t/using-automatic-analysis-tools-with-makerdao-contracts/1021/3\n * Author: Dan Guido / Trail of Bits\n * Slightly modified by Bernhard Mueller\n\n* An assertion violation is possible in 3 transactions:\n*\n* etch(addr)\n* lookup(slate, addr)\n* checkAnInvariant()\n\n* Whereby slate == Keccak(addr)\n*\n* Ideally tools should output the correct transaction trace.\n*/\n\npragma solidity ^0.5.0;\n\ncontract ReturnMemory {\n mapping(bytes32=>address) public slates;\n bool everMatched = false;\n\n function etch(address yay) public returns (bytes32 slate) {\n bytes32 hash = keccak256(abi.encodePacked(yay));\n slates[hash] = yay;\n return hash;\n }\n\n function lookup(bytes32 slate, address nay) public {\n if (nay != address(0x0)) {\n everMatched = slates[slate] == nay;\n }\n }\n\n function checkAnInvariant() public returns (bool) {\n assert(!everMatched);\n }\n}\n",
    "return_memory_fixed.sol": "/*\n * @source: https://forum.zeppelin.solutions/t/using-automatic-analysis-tools-with-makerdao-contracts/1021/3\n * Author: Dan Guido / Trail of Bits\n * Slightly modified by Bernhard Mueller\n\n * An assertion violation is possible in 3 transactions:\n *\n * etch(addr)\n * lookup(slate, addr)\n * checkAnInvariant()\n *\n * Whereby slate == Keccak(addr)\n *\n * Ideally tools should output the correct transaction trace.\n */\n\npragma solidity ^0.5.0;\n\ncontract ReturnMemory {\n mapping(bytes32 => address) public slates;\n bool everMatched = false;\n\n function etch(address yay) public returns (bytes32 slate) {\n bytes32 hash = keccak256(abi.encodePacked(yay));\n slates[hash] = yay;\n return hash;\n }\n\n function lookup(bytes32 slate, address nay) public {\n if (nay != address(0x0)) {\n everMatched = (slates[slate] == nay);\n }\n }\n\n function checkAnInvariant() public returns (bool) {\n require(!everMatched, \"Invariant violated: everMatched is true!\");\n return true;\n }\n}\n"

}