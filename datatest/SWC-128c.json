{
    "id": "SWC-128",
    "description": [
        "When smart contracts are deployed or functions inside them are called, the execution of these actions always requires a certain amount of gas, based of how much computation is needed to complete them. The Ethereum network specifies a block gas limit and the sum of all transactions included in a block can not exceed the threshold.",
        "Programming patterns that are harmless in centralized applications can lead to Denial of Service conditions in smart contracts when the cost of executing a function exceeds the block gas limit. Modifying an array of unknown size, that increases in size over time, can lead to such a Denial of Service condition."
    ],
    "dos_simple.sol": "pragma solidity ^0.4.25;\n\ncontract DosOneFunc {\n\n address[] listAddresses;\n\n function ifillArray() public returns (bool){\n if(listAddresses.length<1500) {\n\n for(uint i=0;i<350;i++) {\n listAddresses.push(msg.sender);\n }\n return true;\n\n } else {\n listAddresses = new address[](0);\n return false;\n }\n }\n}\n",
    "dos_simple_fixed.sol": "pragma solidity ^0.4.25;\n\ncontract DosOneFunc {\n    address[] listAddresses;\n    uint public maxBatchSize = 50; // Limit batch processing\n\n    function fillArray(uint batchSize) public returns (bool) {\n        require(batchSize > 0 && batchSize <= maxBatchSize, \"Invalid batch size\");\n\n        if (listAddresses.length < 1500) {\n            for (uint i = 0; i < batchSize; i++) {\n                listAddresses.push(msg.sender);\n            }\n            return true;\n        }\n        return false;\n    }\n\n    function clearBatch(uint batchSize) public {\n        require(batchSize > 0 && batchSize <= maxBatchSize, \"Invalid batch size\");\n        require(listAddresses.length > 0, \"Array is already empty\");\n\n        uint deleteCount = batchSize > listAddresses.length ? listAddresses.length : batchSize;\n        for (uint i = 0; i < deleteCount; i++) {\n            listAddresses[listAddresses.length - 1] = address(0);\n            listAddresses.length--;\n        }\n    }\n\n    function getListSize() public view returns (uint) {\n        return listAddresses.length;\n    }\n}\n"
}