{
    "id": "SWC-110",
    "description": [
        "The Solidity assert() function is meant to assert invariants. Properly functioning code should never reach a failing assert statement. A reachable assertion can mean one of two things:"
    ],
    "token-with-backdoor.sol": "/*\n * @source: TrailofBits workshop at TruffleCon 2018\n * @author: Josselin Feist (adapted for SWC by Bernhard Mueller)\n * Assert violation with 3 message calls:\n * - airdrop()\n * - backdoor()\n * - test_invariants()\n */\npragma solidity ^0.4.22;\n\ncontract Token{\n\n mapping(address => uint) public balances;\n function airdrop() public{\n balances[msg.sender] = 1000;\n }\n\n function consume() public{\n require(balances[msg.sender]>0);\n balances[msg.sender] -= 1;\n }\n\n function backdoor() public{\n balances[msg.sender] += 1;\n }\n\n function test_invariants() {\n assert(balances[msg.sender] <= 1000);\n }\n}\n",
    "token-with-backdoor_fixed.sol": "/*\n * @source: TrailofBits workshop at TruffleCon 2018\n * @author: Josselin Feist (adapted for SWC by Bernhard Mueller)\n */\npragma solidity ^0.4.22;\n\ncontract Token {\n\n mapping(address => uint) public balances;\n \n function airdrop() public {\n balances[msg.sender] = 1000;\n }\n\n function consume() public {\n require(balances[msg.sender] > 0);\n balances[msg.sender] -= 1;\n }\n\n function backdoor() public {\n balances[msg.sender] += 1;\n }\n\n function test_invariants() public {\n require(balances[msg.sender] <= 1000, \"Invariant violated\");\n }\n}\n"
}