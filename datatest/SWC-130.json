{
    "id": "SWC-130",
    "description": [
        "Malicious actors can use the Right-To-Left-Override unicode character to force RTL text rendering and confuse users as to the real intent of a contract."
    ],
    "guess_the_number.sol": "/*\n * @source: https://youtu.be/P_Mtd5Fc_3E\n * @author: Shahar Zini\n */\npragma solidity ^0.5.0;\n\ncontract GuessTheNumber\n{\n    uint _secretNumber;\n    address payable _owner;\n    event success(string);\n    event wrongNumber(string);\n\n    constructor(uint secretNumber) payable public\n    {\n        require(secretNumber <= 10);\n        _secretNumber = secretNumber;\n        _owner = msg.sender;\n    }\n\n    function getValue() view public returns (uint)\n    {\n        return address(this).balance;\n    }\n\n    function guess(uint n) payable public\n    {\n        require(msg.value == 1 ether);\n\n        uint p = address(this).balance;\n        checkAndTransferPrize(/*The prize‮/*rebmun desseug*/n , p/*‭\n                /*The user who should benefit */,msg.sender);\n    }\n\n    function checkAndTransferPrize(uint p, uint n, address payable guesser) internal returns(bool)\n    {\n        if(n == _secretNumber)\n        {\n            guesser.transfer(p);\n            emit success(\"You guessed the correct number!\");\n        }\n        else\n        {\n            emit wrongNumber(\"You've made an incorrect guess!\");\n        }\n    }\n\n    function kill() public\n    {\n        require(msg.sender == _owner);\n        selfdestruct(_owner);\n    }\n}",
    "guess_the_number_fixed.sol": "pragma solidity ^0.5.0;\n\ncontract GuessTheNumber {\n    uint private _secretNumber;\n    address payable private _owner;\n    \n    event Success(string);\n    event WrongNumber(string);\n\n    constructor(uint secretNumber) payable public {\n        require(secretNumber <= 10, \"Secret number must be between 0 and 10\");\n        _secretNumber = secretNumber;\n        _owner = msg.sender;\n    }\n\n    function getValue() public view returns (uint) {\n        return address(this).balance;\n    }\n\n    function guess(uint n) public payable {\n        require(msg.value == 1 ether, \"You must send exactly 1 ether\");\n\n        uint prize = address(this).balance;\n        checkAndTransferPrize(n, prize, msg.sender);\n    }\n\n    function checkAndTransferPrize(uint n, uint prize, address payable guesser) internal {\n        if (n == _secretNumber) {\n            guesser.transfer(prize);\n            emit Success(\"You guessed the correct number!\");\n        } else {\n            emit WrongNumber(\"You've made an incorrect guess!\");\n        }\n    }\n\n    function kill() public {\n        require(msg.sender == _owner, \"Only the owner can self-destruct the contract\");\n        selfdestruct(_owner);\n    }\n}"
}