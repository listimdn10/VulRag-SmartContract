{
    "id": "SWC-110",
    "description": [
        "The Solidity assert() function is meant to assert invariants. Properly functioning code should never reach a failing assert statement. A reachable assertion can mean one of two things:"
    ],
    "constructor_create.sol": "/*\n * @source: ChainSecurity\n * @author: Anton Permenev\n */\n\npragma solidity ^0.4.25;\n\ncontract ConstructorCreate{\n B b = new B();\n\n function check(){\n assert(b.foo() == 10);\n }\n\n}\n\ncontract B{\n\n function foo() returns(uint){\n return 11;\n }\n}\n",
    "constructor_create_fixed.sol": "/*\n * @source: ChainSecurity\n * @author: Anton Permenev\n */\n\npragma solidity ^0.4.25;\n\ncontract ConstructorCreate {\n    B b = new B();  \n\n    function check() public {\n        require(b.foo() == 10);  \n    }\n}\n\ncontract B {\n    function foo() public returns(uint) {\n        return 11;  \n    }\n}\n"

}