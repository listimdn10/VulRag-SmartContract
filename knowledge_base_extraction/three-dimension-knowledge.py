import os
import json
import subprocess
import re
import shutil
import glob
import os
from openai import OpenAI
# C·∫•u h√¨nh OpenAI API Key
OPENAI_API_KEY = ""
client = OpenAI()

# ƒê∆∞·ªùng d·∫´n t·ªõi th∆∞ m·ª•c ch·ª©a c√°c file JSON
json_dir = './datatest'  # Th∆∞ m·ª•c datatest c√πng c·∫•p v·ªõi knowledge_base_extraction
sol_files_dir = 'sol_files'  # Th∆∞ m·ª•c ch·ª©a file .sol
fixed_sol_file_dir = 'fixed_sol_files'

os.makedirs(sol_files_dir, exist_ok=True)  # T·∫°o th∆∞ m·ª•c n·∫øu ch∆∞a t·ªìn t·∫°i
os.makedirs(fixed_sol_file_dir, exist_ok=True)  # T·∫°o th∆∞ m·ª•c n·∫øu ch∆∞a t·ªìn t·∫°i


# Duy·ªát qua t·ª´ng file JSON trong th∆∞ m·ª•c
test_files = [f for f in os.listdir(json_dir) if f.endswith('.json')]

if not test_files:
    print("Kh√¥ng t√¨m th·∫•y file JSON n√†o trong th∆∞ m·ª•c datatest.")
    exit()




#methods 
# Ch·∫°y Slither ƒë·ªÉ ph√¢n t√≠ch file .sol
def get_solidity_version(sol_file):
    """
    ƒê·ªçc file Solidity v√† tr√≠ch xu·∫•t phi√™n b·∫£n Solidity t·ª´ 'pragma solidity'
    """
    with open(sol_file, "r", encoding="utf-8") as f:
        content = f.read()
    
    match = re.search(r"pragma solidity\s+([\^~]?\d+\.\d+\.\d+);", content)
    if match:
        print("done get solidity_version")
        return match.group(1).replace("^", "").replace("~", "")  # X√≥a d·∫•u ^ ho·∫∑c ~ n·∫øu c√≥
    return None


def install_and_use_solc(version):
    print(f"‚öôÔ∏è C√†i ƒë·∫∑t v√† s·ª≠ d·ª•ng solc {version}...")
    try:
        subprocess.run(["solc-select", "install", version], check=True)
        subprocess.run(["solc-select", "use", version], check=True)
        print(f"‚úÖ ƒê√£ c√†i ƒë·∫∑t v√† s·ª≠ d·ª•ng solc {version}")
    except subprocess.CalledProcessError as e:
        print(f"‚ùå L·ªói khi c√†i ƒë·∫∑t solc {version}:\n{e}")

def move_dot_files(sol_file, file_dir):
    """
    Di chuy·ªÉn t·∫•t c·∫£ c√°c file .dot v√†o th∆∞ m·ª•c dot_files/<t√™n c·ªßa file sol>/
    """
    sol_base_name = os.path.splitext(os.path.basename(sol_file))[0]  # L·∫•y t√™n file kh√¥ng c√≥ .sol
    dot_folder = os.path.join("dot_files", sol_base_name)  # T·∫°o th∆∞ m·ª•c dot_files/<t√™n file sol>/
    os.makedirs(dot_folder, exist_ok=True)  # T·∫°o th∆∞ m·ª•c n·∫øu ch∆∞a t·ªìn t·∫°i

    for file in os.listdir(file_dir):
        if file.endswith(".dot"):
            source_path = os.path.join(file_dir, file)
            target_path = os.path.join(dot_folder, file)
            shutil.move(source_path, target_path)
            print(f"üìÅ ƒê√£ di chuy·ªÉn {file} v√†o {dot_folder}/")
    merge_dot_files(sol_base_name)  # G·ªçi h√†m h·ª£p nh·∫•t sau khi di chuy·ªÉn file .dot


def run_slither(sol_file, file_dir):
    """
    Ch·∫°y l·ªánh `slither file.sol --print cfg`
    """
    if not os.path.exists(sol_file):
        print(f"‚ùå File {sol_file} kh√¥ng t·ªìn t·∫°i!")
        return
    
    cmd = ["slither", sol_file, "--print", "cfg"]

    try:
        result = subprocess.run(cmd, capture_output=True, text=True, check=True)
        print("‚úÖ Output c·ªßa Slither:")
        print(result.stdout)

        with open("cfg_output.txt", "w", encoding="utf-8") as f:
            f.write(result.stdout)

        print("üìÅ Output ƒë√£ ƒë∆∞·ª£c l∆∞u v√†o cfg_output.txt")
        move_dot_files(sol_file, file_dir)  # Di chuy·ªÉn file .dot v√†o th∆∞ m·ª•c t∆∞∆°ng ·ª©ng
    except subprocess.CalledProcessError as e:
        print(f"‚ùå L·ªói khi ch·∫°y Slither:\n{e.stderr}")

def merge_dot_files(sol_file_name):
    """
    H·ª£p nh·∫•t t·∫•t c·∫£ c√°c file .dot trong t·ª´ng th∆∞ m·ª•c con c·ªßa dot_files
    """
    parent_dir = "dot_files"
    subdir_path = os.path.join(parent_dir, sol_file_name)  # Ch·ªâ l·∫•y th∆∞ m·ª•c dot_files/<sol_file_name>/

    
    if not os.path.exists(parent_dir):
        print(f"‚ö†Ô∏è Th∆∞ m·ª•c {parent_dir} kh√¥ng t·ªìn t·∫°i, b·ªè qua h·ª£p nh·∫•t.")
        return
    
    # L·∫•y t·∫•t c·∫£ file .dot trong th∆∞ m·ª•c con dot_files/<sol_file_name>/
    dot_files = glob.glob(os.path.join(subdir_path, "*.dot"))
    
    if not dot_files:
        print(f"‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y file .dot n√†o trong {subdir_path}.")
        return

    # T·∫°o file .dot h·ª£p nh·∫•t
    merged_dot_file = os.path.join(subdir_path, f"{sol_file_name}.dot")

    with open(merged_dot_file, "w") as outfile:
        outfile.write("digraph CFG {\n")  # Ch·ªâ ghi ph·∫ßn m·ªü ƒë·∫ßu m·ªôt l·∫ßn

        for dot_file in dot_files:
            with open(dot_file, "r") as infile:
                for line in infile:
                    # Lo·∫°i b·ªè d√≤ng b·∫Øt ƒë·∫ßu b·∫±ng "digraph" ho·∫∑c ch·ªâ c√≥ d·∫•u "}"
                    if line.startswith("digraph") or line.strip() == "}":
                        continue
                    outfile.write(line)  # Ghi n·ªôi dung c·ªßa c√°c node
        
        outfile.write("}\n")  # Ch·ªâ ghi d·∫•u ƒë√≥ng m·ªôt l·∫ßn ·ªü cu·ªëi

    # X√≥a c√°c file .dot c≈©, ch·ªâ gi·ªØ l·∫°i file h·ª£p nh·∫•t
    for dot_file in dot_files:
        if dot_file != merged_dot_file:
            os.remove(dot_file)

    print(f"‚úÖ H·ª£p nh·∫•t ho√†n t·∫•t! ƒê√£ t·∫°o {merged_dot_file}.")
    

import os
import re
import string

def save_analysis_result(swcid, answer, solidity_content):
    """
    L∆∞u k·∫øt qu·∫£ ph√¢n t√≠ch v√†o th∆∞ m·ª•c Documents/{SWC_id}.
    N·∫øu SWC_id ƒë√£ t·ªìn t·∫°i, th√™m h·∫≠u t·ªë -a, -b, -c ƒë·ªÉ tr√°nh tr√πng l·∫∑p.
    """
    base_dir = os.path.join(os.getcwd(), "documents")  # Th∆∞ m·ª•c hi·ªán t·∫°i/documents
    os.makedirs(base_dir, exist_ok=True)  # T·∫°o th∆∞ m·ª•c n·∫øu ch∆∞a c√≥    
    sanitized_swcid = re.sub(r'[^\w\-]', '_', swcid)  # X√≥a k√Ω t·ª± ƒë·∫∑c bi·ªát

    target_file = os.path.join(base_dir, f"{sanitized_swcid}.txt")

    
    # N·∫øu file ƒë√£ t·ªìn t·∫°i, th√™m h·∫≠u t·ªë -a, -b, -c...
    
    suffix_index = 0
    while os.path.exists(target_file):
        suffix_index += 1
        suffix = f"-{string.ascii_lowercase[suffix_index-1]}"  # a, b, c...
        target_file = os.path.join(base_dir, f"{sanitized_swcid}{suffix}.txt")



        # L∆∞u n·ªôi dung file Solidity v√† k·∫øt qu·∫£ GPT
    with open(target_file, "w", encoding="utf-8") as f:
        f.write(solidity_content)
        f.write("\n\n")  # NgƒÉn c√°ch n·ªôi dung Solidity v√† GPT
        f.write(answer)

    
    print(f"‚úÖ K·∫øt qu·∫£ ƒë√£ ƒë∆∞·ª£c l∆∞u t·∫°i: {target_file}")



def analyze_funtional_sematics_with_gpt(sol_file_path, swc_id):
    """G·ª≠i n·ªôi dung file Solidity ƒë·∫øn OpenAI GPT-3.5 ƒë·ªÉ ph√¢n t√≠ch"""
    if not os.path.exists(sol_file_path):
        print(f"‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y file {sol_file_path}")
        return

    with open(sol_file_path, "r", encoding="utf-8") as sol_file:
        solidity_content = sol_file.read()

    prompt = f"""
        What is the purpose of the above code snippet? Please 
        summarize the answer in one sentence with the following format:
        ‚ÄúAbstract purpose:‚Äù. 

        Please summarize the functions of the above code snippet in the list
        format without any other explanation: ‚ÄúDetail Behaviors: 1. 2. 3...‚Äù 

        Here is the file content:
        {solidity_content}
                """

    try:
        completion = client.chat.completions.create(
            model="gpt-3.5-turbo",
            messages=[
                {"role": "developer", "content": "You are a specialist in Smart Contract analysing, talk like an expert in Smart Contract"},
                {
                        "role": "user",
                        "content": prompt,

                }, 
            ],
        )
        answer = completion.choices[0].message.content
        print(f"\nüìÑ ANALYZE THE {solidity_content}:\n{answer}")
        save_analysis_result(swc_id,answer, solidity_content)

    except Exception as e:
        print(f"‚ùå L·ªói khi g·ªçi OpenAI API: {e}")

def analyze_dot_file_with_gpt(dot_file_path):
        """G·ª≠i n·ªôi dung file .dot ƒë·∫øn OpenAI GPT-3.5 ƒë·ªÉ ph√¢n t√≠ch"""
        if not os.path.exists(dot_file_path):
            print(f"‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y file {dot_file_path}")
            return

        with open(dot_file_path, "r", encoding="utf-8") as file:
            dot_content = file.read()
    # Kh√∫c n√†y d·ª± ki·∫øn c√¢u prompt c·∫ßn c√≥ c·∫£ .dot v√† code solidity 
        prompt = f"""
    This is a code snippet with
    a vulnerability {SWC_id}: [Vulnerable Code] The vulnerability is
    described as follows: {SWC_description} 
    The code after modification is as follows: [Patched
    Code] Why is the above modification necessary? 


    I want you to act as a vulnerability detection expert and organize 
    vulnerability knowledge based on the above vulnerability repair information. 
    Please summarize the generalizable specific behavior of the code that leads to the 
    vulnerability and the specific solution to fix it. Format your findings in JSON.
    Here are some examples to guide you on the level of detail expected
    in your extraction: 
    [Vulnerability Causes and Fixing Solution Example 1] 
    [Vulnerability Causes and Fixing Solution Example 2]
                    """

        try:
            completion = client.chat.completions.create(
                model="gpt-4o",
                messages=[
                    {"role": "developer", "content": "You are a specialist in Smart Contract analysing, talk like an expert in Smart Contract"},
                    {
                        "role": "user",
                        "content": prompt,

                    }, 
                ],

            )
            answer = completion.choices[0].message.content
            print(f"\nüìÑ ANALYZE THE {dot_file_path}:\n{answer}")

        except Exception as e:
            print(f"‚ùå L·ªói khi g·ªçi OpenAI API: {e}")

if __name__ == "__main__":
#main
# functional sematics analysis and vul solu
#duy·ªát qua t·ª´ng file json trong dataset
    for json_file in test_files:
        json_path = os.path.join(json_dir, json_file)
        
        # ƒê·ªçc n·ªôi dung file JSON
        with open(json_path, 'r', encoding='utf-8') as f:
            try:
                data = json.load(f)
            except json.JSONDecodeError:
                print(f"L·ªói: Kh√¥ng th·ªÉ ƒë·ªçc file JSON {json_file}")
                continue
        fixed_sol_file_path = ""
        sol_file_path ="" 
        SWC_id = ""
        SWC_description = ""
        # Duy·ªát qua t·ª´ng key trong dictionary ƒë·ªÉ l·∫•y vul.sol
        for key, value in data.items():
            if key.endswith("fixed.sol"):  # Ch·ªâ l·∫•y c√°c file c√≥ ch·ªØ 'fixed'
                # L·∫•y th√¥ng tin id v√† description
                SWC_id = data.get("id", "Unknown ID")
                SWC_description = " ".join(data.get("description", []))  # Gh√©p list th√†nh chu·ªói
                
                # print(value)
                # print("\n" + "-"*80 + "\n")
                # L∆∞u code Solidity v√†o file .sol trong th∆∞ m·ª•c fixed_sol_files
                fixed_sol_file_path = os.path.join(fixed_sol_file_dir, f"{key}") #c√°i n√†y l√† c√°i file .sol ƒë∆∞·ª£c l∆∞u trong dir fixed_sol_files
                with open(fixed_sol_file_path, 'w', encoding='utf-8') as sol_file:
                    sol_file.write(value)

                print("============================================")
                print("X·ª≠ l√Ω vulnerability and solution extraction")

                print(f"üìÅ ƒê√£ l∆∞u code Solidity v√†o {fixed_sol_file_path}\n") 
                #x·ª≠ l√Ω vul and solu 
                print(f"SWC ID: {SWC_id}")
                print(f"Description: {SWC_description}\n")
                print(f"--- File: {key} ---\n")
                fixed_solc_version = get_solidity_version(fixed_sol_file_path)
                if fixed_solc_version:
                    install_and_use_solc(fixed_solc_version)
                    run_slither(fixed_sol_file_path, fixed_sol_file_dir)
                else:
                    print(f"‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y phi√™n b·∫£n Solidity trong {fixed_sol_file_path}")
                    
            #funtional sematics 
            # B·ªè qua c√°c tr∆∞·ªùng 'id' v√† 'description'
            if key not in ['id', 'description'] and 'fixed' not in key:
                print(f"--- File: {key} ---\n")
                # print(value)
                # print("\n" + "-"*80 + "\n")
                
                # L∆∞u code Solidity v√†o file .sol
                sol_file_path = os.path.join(sol_files_dir, f"{key}")
                with open(sol_file_path, 'w', encoding='utf-8') as sol_file:
                    sol_file.write(value)
                
                print(f"üìÅ ƒê√£ l∆∞u code Solidity v√†o {sol_file_path}\n") #sol_file_path l√† file .sol 
                # x·ª≠ l√Ω funtional sematics 
                solc_version = get_solidity_version(sol_file_path)
                if solc_version:
                    install_and_use_solc(solc_version)
                    merged_dot_file = run_slither(sol_file_path, sol_files_dir)
                    # analyze_funtional_sematics_with_gpt(merged_dot_file, sol_file_path)
                    # print("ƒë√¢y l√† sol_file_path:", sol_file_path)
                    # print("ƒë√¢y l√† merge_dot_file:" , merged_dot_file)
                else:
                    print(f"‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y phi√™n b·∫£n Solidity trong {sol_file_path}")
            
        print(sol_file_path)
        # G·ªçi GPT-3.5 ph√¢n t√≠ch file .dot h·ª£p nh·∫•t
        analyze_funtional_sematics_with_gpt(sol_file_path, SWC_id)
        print(fixed_sol_file_path)