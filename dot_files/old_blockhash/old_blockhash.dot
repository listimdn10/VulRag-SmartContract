digraph CFG {
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.value == 1000000000000000000)

IRs:
TMP_0(bool) = msg.value == 1000000000000000000
TMP_1(None) = SOLIDITY_CALL require(bool)(TMP_0)"];
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(guesses[msg.sender].block == 0)

IRs:
REF_0(PredictTheBlockHashChallenge.guess) -> guesses[msg.sender]
REF_1(uint256) -> REF_0.block
TMP_2(bool) = REF_1 == 0
TMP_3(None) = SOLIDITY_CALL require(bool)(TMP_2)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool)(msg.value == 1000000000000000000)

IRs:
TMP_4(bool) = msg.value == 1000000000000000000
TMP_5(None) = SOLIDITY_CALL require(bool)(TMP_4)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
guesses[msg.sender].guess = hash

IRs:
REF_2(PredictTheBlockHashChallenge.guess) -> guesses[msg.sender]
REF_3(bytes32) -> REF_2.guess
REF_3(bytes32) (->guesses) := hash(bytes32)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
guesses[msg.sender].block = block.number + 1

IRs:
REF_4(PredictTheBlockHashChallenge.guess) -> guesses[msg.sender]
REF_5(uint256) -> REF_4.block
TMP_6(uint256) = block.number + 1
REF_5(uint256) (->guesses) := TMP_6(uint256)"];
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(block.number > guesses[msg.sender].block)

IRs:
REF_6(PredictTheBlockHashChallenge.guess) -> guesses[msg.sender]
REF_7(uint256) -> REF_6.block
TMP_7(bool) = block.number > REF_7
TMP_8(None) = SOLIDITY_CALL require(bool)(TMP_7)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
answer = blockhash(uint256)(guesses[msg.sender].block)

IRs:
REF_8(PredictTheBlockHashChallenge.guess) -> guesses[msg.sender]
REF_9(uint256) -> REF_8.block
TMP_9(uint256) = SOLIDITY_CALL blockhash(uint256)(REF_9)
answer(bytes32) := TMP_9(uint256)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
guesses[msg.sender].block = 0

IRs:
REF_10(PredictTheBlockHashChallenge.guess) -> guesses[msg.sender]
REF_11(uint256) -> REF_10.block
REF_11(uint256) (->guesses) := 0(uint256)"];
3->4;
4[label="Node Type: IF 4

EXPRESSION:
guesses[msg.sender].guess == answer

IRs:
REF_12(PredictTheBlockHashChallenge.guess) -> guesses[msg.sender]
REF_13(bytes32) -> REF_12.guess
TMP_10(bool) = REF_13 == answer
CONDITION TMP_10"];
4->5[label="True"];
4->6[label="False"];
5[label="Node Type: EXPRESSION 5

EXPRESSION:
msg.sender.transfer(2000000000000000000)

IRs:
Transfer dest:msg.sender value:2000000000000000000"];
5->6;
6[label="Node Type: END_IF 6
"];
}
