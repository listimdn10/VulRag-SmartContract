digraph CFG {
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(numElements > 1500)

IRs:
TMP_4(bool) = numElements > 1500
TMP_5(None) = SOLIDITY_CALL require(bool)(TMP_4)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
numElements = 0

IRs:
numElements(uint256) := 0(uint256)"];
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(numElements > 1500)

IRs:
TMP_6(bool) = numElements > 1500
TMP_7(None) = SOLIDITY_CALL require(bool)(TMP_6)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
array = new uint256[](0)

IRs:
TMP_9(uint256[])  = new uint256[](0)
array(uint256[]) = ['TMP_9(uint256[])']"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
numElements = 0

IRs:
numElements(uint256) := 0(uint256)"];
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
numElements

IRs:
RETURN numElements"];
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
array.length

IRs:
REF_3 -> LENGTH array
RETURN REF_3"];
0[label="Node Type: ENTRY_POINT 0
"];
0->3;
1[label="Node Type: BEGIN_LOOP 1
"];
1->4;
2[label="Node Type: END_LOOP 2
"];
3[label="Node Type: NEW VARIABLE 3

EXPRESSION:
i = 0

IRs:
i(uint256) := 0(uint256)"];
3->1;
4[label="Node Type: IF_LOOP 4

EXPRESSION:
i < numbers

IRs:
TMP_0(bool) = i < numbers
CONDITION TMP_0"];
4->5[label="True"];
4->2[label="False"];
5[label="Node Type: IF 5

EXPRESSION:
numElements == array.length

IRs:
REF_0 -> LENGTH array
TMP_1(bool) = numElements == REF_0
CONDITION TMP_1"];
5->6[label="True"];
5->7[label="False"];
6[label="Node Type: EXPRESSION 6

EXPRESSION:
array.length += 1

IRs:
REF_1 -> LENGTH array
REF_1(-> array) = REF_1 + 1"];
6->7;
7[label="Node Type: END_IF 7
"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
array[numElements ++] = value

IRs:
TMP_2(uint256) := numElements(uint256)
numElements(uint256) = numElements + 1
REF_2(uint256) -> array[TMP_2]
REF_2(uint256) (->array) := value(uint256)"];
8->9;
9[label="Node Type: EXPRESSION 9

EXPRESSION:
i ++

IRs:
TMP_3(uint256) := i(uint256)
i(uint256) = i + 1"];
9->4;
0[label="Node Type: OTHER_ENTRYPOINT 0

EXPRESSION:
numElements = 0

IRs:
numElements(uint256) := 0(uint256)"];
}
