digraph CFG {
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
owner = msg.sender

IRs:
owner(address) := msg.sender(address)"];
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
map[key]

IRs:
REF_1(uint256) -> map[key]
RETURN REF_1"];
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool,string)(msg.sender == owner,Not the contract owner)

IRs:
TMP_4(bool) = msg.sender == owner
TMP_5(None) = SOLIDITY_CALL require(bool,string)(TMP_4,Not the contract owner)"];
1->2;
2[label="Node Type: _ 2
"];
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
map[key] = value

IRs:
REF_0(uint256) -> map[key]
REF_0(uint256) (->map) := value(uint256)"];
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
msg.sender.transfer(address(this).balance)

IRs:
TMP_0 = CONVERT this to address
TMP_1(uint256) = SOLIDITY_CALL balance(address)(TMP_0)
Transfer dest:msg.sender value:TMP_1"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
onlyOwner()

IRs:
MODIFIER_CALL, Map.onlyOwner()()"];
2->1;
}
