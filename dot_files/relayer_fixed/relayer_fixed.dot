digraph CFG {
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool,string)(transactions[transactionId].executed == false,same transaction twice)

IRs:
REF_0(Relayer.Tx) -> transactions[transactionId]
REF_1(bool) -> REF_0.executed
TMP_0(bool) = REF_1 == False
TMP_1(None) = SOLIDITY_CALL require(bool,string)(TMP_0,same transaction twice)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
transactions[transactionId].data = _data

IRs:
REF_2(Relayer.Tx) -> transactions[transactionId]
REF_3(bytes) -> REF_2.data
REF_3(bytes) (->transactions) := _data(bytes)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
transactions[transactionId].executed = true

IRs:
REF_4(Relayer.Tx) -> transactions[transactionId]
REF_5(bool) -> REF_4.executed
REF_5(bool) (->transactions) := True(bool)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
transactionId += 1

IRs:
transactionId(uint256) = transactionId + 1"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
address(target).call(abi.encodeWithSignature(execute(bytes),_data,_gasLimit))

IRs:
TMP_2 = CONVERT target to address
TMP_3(bytes) = SOLIDITY_CALL abi.encodeWithSignature()(execute(bytes),_data,_gasLimit)
TUPLE_0(bool,bytes) = LOW_LEVEL_CALL, dest:TMP_2, function:call, arguments:['TMP_3']  "];
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool,string)(gasleft()() >= _gasLimit,not enough gas)

IRs:
TMP_4(uint256) = SOLIDITY_CALL gasleft()()
TMP_5(bool) = TMP_4 >= _gasLimit
TMP_6(None) = SOLIDITY_CALL require(bool,string)(TMP_5,not enough gas)"];
}
