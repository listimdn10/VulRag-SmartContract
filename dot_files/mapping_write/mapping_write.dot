digraph CFG {
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
map[key]

IRs:
REF_3(uint256) -> map[key]
RETURN REF_3"];
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
map.length <= key

IRs:
REF_0 -> LENGTH map
TMP_0(bool) = REF_0 <= key
CONDITION TMP_0"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
map.length = key + 1

IRs:
REF_1 -> LENGTH map
TMP_1(uint256) = key + 1
REF_1(uint256) (->map) := TMP_1(uint256)"];
2->3;
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
map[key] = value

IRs:
REF_2(uint256) -> map[key]
REF_2(uint256) (->map) := value(uint256)"];
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.sender == owner)

IRs:
TMP_2(bool) = msg.sender == owner
TMP_3(None) = SOLIDITY_CALL require(bool)(TMP_2)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
msg.sender.transfer(address(this).balance)

IRs:
TMP_4 = CONVERT this to address
TMP_5(uint256) = SOLIDITY_CALL balance(address)(TMP_4)
Transfer dest:msg.sender value:TMP_5"];
}
