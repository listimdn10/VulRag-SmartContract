digraph CFG {
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool,string)(batchSize > 0,Batch size must be greater than zero)

IRs:
TMP_10(bool) = batchSize > 0
TMP_11(None) = SOLIDITY_CALL require(bool,string)(TMP_10,Batch size must be greater than zero)"];
1->4;
2[label="Node Type: BEGIN_LOOP 2
"];
2->5;
3[label="Node Type: END_LOOP 3
"];
3->8;
4[label="Node Type: NEW VARIABLE 4

EXPRESSION:
i = 0

IRs:
i(uint256) := 0(uint256)"];
4->2;
5[label="Node Type: IF_LOOP 5

EXPRESSION:
i < batchSize

IRs:
TMP_12(bool) = i < batchSize
CONDITION TMP_12"];
5->6[label="True"];
5->3[label="False"];
6[label="Node Type: EXPRESSION 6

EXPRESSION:
creditorAddresses.push(msg.sender)

IRs:
REF_5 -> LENGTH creditorAddresses
TMP_14(uint256) := REF_5(uint256)
TMP_15(uint256) = TMP_14 + 1
REF_5(uint256) (->creditorAddresses) := TMP_15(uint256)
REF_6(address) -> creditorAddresses[TMP_14]
REF_6(address) (->creditorAddresses) := msg.sender(address)"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
i ++

IRs:
TMP_16(uint256) := i(uint256)
i(uint256) = i + 1"];
7->5;
8[label="Node Type: RETURN 8

EXPRESSION:
true

IRs:
RETURN True"];
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool,string)(batchSize > 0,Batch size must be greater than zero)

IRs:
TMP_0(bool) = batchSize > 0
TMP_1(None) = SOLIDITY_CALL require(bool,string)(TMP_0,Batch size must be greater than zero)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
length = creditorAddresses.length

IRs:
REF_0 -> LENGTH creditorAddresses
length(uint256) := REF_0(uint256)"];
2->3;
3[label="Node Type: IF 3

EXPRESSION:
length > 1500

IRs:
TMP_2(bool) = length > 1500
CONDITION TMP_2"];
3->17[label="True"];
3->16[label="False"];
5[label="Node Type: BEGIN_LOOP 5
"];
5->8;
6[label="Node Type: END_LOOP 6
"];
6->12;
7[label="Node Type: NEW VARIABLE 7

EXPRESSION:
i = 0

IRs:
i(uint256) := 0(uint256)"];
7->5;
8[label="Node Type: IF_LOOP 8

EXPRESSION:
i < deleteCount

IRs:
TMP_3(bool) = i < deleteCount
CONDITION TMP_3"];
8->9[label="True"];
8->6[label="False"];
9[label="Node Type: EXPRESSION 9

EXPRESSION:
creditorAddresses[length - 1] = address(0)

IRs:
TMP_4(uint256) = length - 1
REF_1(address) -> creditorAddresses[TMP_4]
TMP_5 = CONVERT 0 to address
REF_1(address) (->creditorAddresses) := TMP_5(address)"];
9->10;
10[label="Node Type: EXPRESSION 10

EXPRESSION:
length --

IRs:
TMP_6(uint256) := length(uint256)
length(uint256) = length - 1"];
10->11;
11[label="Node Type: EXPRESSION 11

EXPRESSION:
i ++

IRs:
TMP_7(uint256) := i(uint256)
i(uint256) = i + 1"];
11->8;
12[label="Node Type: EXPRESSION 12

EXPRESSION:
creditorAddresses.length = length

IRs:
REF_2 -> LENGTH creditorAddresses
REF_2(uint256) (->creditorAddresses) := length(uint256)"];
12->13;
13[label="Node Type: IF 13

EXPRESSION:
creditorAddresses.length == 0

IRs:
REF_3 -> LENGTH creditorAddresses
TMP_8(bool) = REF_3 == 0
CONDITION TMP_8"];
13->14[label="True"];
13->15[label="False"];
14[label="Node Type: EXPRESSION 14

EXPRESSION:
win = true

IRs:
win(bool) := True(bool)"];
14->15;
15[label="Node Type: END_IF 15
"];
15->16;
16[label="Node Type: END_IF 16
"];
17[label="Node Type: IF 17

EXPRESSION:
batchSize > length

IRs:
TMP_9(bool) = batchSize > length
CONDITION TMP_9"];
17->18[label="True"];
17->19[label="False"];
18[label="Node Type: EXPRESSION 18

EXPRESSION:
deleteCount = length

IRs:
deleteCount(uint256) := length(uint256)"];
18->20;
19[label="Node Type: EXPRESSION 19

EXPRESSION:
deleteCount = batchSize

IRs:
deleteCount(uint256) := batchSize(uint256)"];
19->20;
20[label="Node Type: END_IF 20
"];
20->7;
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
win

IRs:
RETURN win"];
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
creditorAddresses.length

IRs:
REF_7 -> LENGTH creditorAddresses
RETURN REF_7"];
0[label="Node Type: OTHER_ENTRYPOINT 0

EXPRESSION:
win = false

IRs:
win(bool) := False(bool)"];
}
