digraph CFG {
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool,string)(msg.value == _amount,must send exact amount)

IRs:
TMP_0(bool) = msg.value == _amount
TMP_1(None) = SOLIDITY_CALL require(bool,string)(TMP_0,must send exact amount)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
users[msg.sender].unlockBlock = block.number + (_time / 14)

IRs:
REF_0(TimeLock.User) -> users[msg.sender]
REF_1(uint256) -> REF_0.unlockBlock
TMP_2(uint256) = _time / 14
TMP_3(uint256) = block.number + TMP_2
REF_1(uint256) (->users) := TMP_3(uint256)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
users[msg.sender].amount = _amount

IRs:
REF_2(TimeLock.User) -> users[msg.sender]
REF_3(uint256) -> REF_2.amount
REF_3(uint256) (->users) := _amount(uint256)"];
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool,string)(users[msg.sender].amount > 0,no amount locked)

IRs:
REF_4(TimeLock.User) -> users[msg.sender]
REF_5(uint256) -> REF_4.amount
TMP_4(bool) = REF_5 > 0
TMP_5(None) = SOLIDITY_CALL require(bool,string)(TMP_4,no amount locked)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool,string)(block.number >= users[msg.sender].unlockBlock,lock period not over)

IRs:
REF_6(TimeLock.User) -> users[msg.sender]
REF_7(uint256) -> REF_6.unlockBlock
TMP_6(bool) = block.number >= REF_7
TMP_7(None) = SOLIDITY_CALL require(bool,string)(TMP_6,lock period not over)"];
2->3;
3[label="Node Type: NEW VARIABLE 3

EXPRESSION:
amount = users[msg.sender].amount

IRs:
REF_8(TimeLock.User) -> users[msg.sender]
REF_9(uint256) -> REF_8.amount
amount(uint256) := REF_9(uint256)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
users[msg.sender].amount = 0

IRs:
REF_10(TimeLock.User) -> users[msg.sender]
REF_11(uint256) -> REF_10.amount
REF_11(uint256) (->users) := 0(uint256)"];
4->5;
5[label="Node Type: NEW VARIABLE 5
"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
(success,None) = msg.sender.call.value(amount)()

IRs:
TUPLE_0(bool,bytes) = LOW_LEVEL_CALL, dest:msg.sender, function:call, arguments:[''] value:amount 
success(bool)= UNPACK TUPLE_0 index: 0 "];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
require(bool,string)(success,transfer failed)

IRs:
TMP_9(None) = SOLIDITY_CALL require(bool,string)(success,transfer failed)"];
}
