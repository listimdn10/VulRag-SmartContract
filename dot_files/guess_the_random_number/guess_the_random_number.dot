digraph CFG {
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.value == 1000000000000000000)

IRs:
TMP_9(bool) = msg.value == 1000000000000000000
TMP_10(None) = SOLIDITY_CALL require(bool)(TMP_9)"];
1->2;
2[label="Node Type: IF 2

EXPRESSION:
n == answer

IRs:
TMP_11(bool) = n == answer
CONDITION TMP_11"];
2->3[label="True"];
2->4[label="False"];
3[label="Node Type: EXPRESSION 3

EXPRESSION:
msg.sender.transfer(2000000000000000000)

IRs:
Transfer dest:msg.sender value:2000000000000000000"];
3->4;
4[label="Node Type: END_IF 4
"];
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.value == 1000000000000000000)

IRs:
TMP_0(bool) = msg.value == 1000000000000000000
TMP_1(None) = SOLIDITY_CALL require(bool)(TMP_0)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
answer = uint8(keccak256()(block.blockhash(block.number - 1),now))

IRs:
TMP_2(uint256) = block.number - 1
TMP_3(uint256) = SOLIDITY_CALL blockhash(uint256)(TMP_2)
TMP_4(bytes32) = SOLIDITY_CALL keccak256()(TMP_3,now)
TMP_5 = CONVERT TMP_4 to uint8
answer(uint8) := TMP_5(uint8)"];
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
address(this).balance == 0

IRs:
TMP_6 = CONVERT this to address
TMP_7(uint256) = SOLIDITY_CALL balance(address)(TMP_6)
TMP_8(bool) = TMP_7 == 0
RETURN TMP_8"];
}
