digraph CFG {
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool,string)(msg.value == amount,msg.value must be equal to amount)

IRs:
TMP_0(bool) = msg.value == amount
TMP_1(None) = SOLIDITY_CALL require(bool,string)(TMP_0,msg.value must be equal to amount)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
balance[msg.sender] = amount

IRs:
REF_0(uint256) -> balance[msg.sender]
REF_0(uint256) (->balance) := amount(uint256)"];
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool,string)(amount <= balance[msg.sender],amount must be less than balance)

IRs:
REF_1(uint256) -> balance[msg.sender]
TMP_2(bool) = amount <= REF_1
TMP_3(None) = SOLIDITY_CALL require(bool,string)(TMP_2,amount must be less than balance)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
previousBalance = balance[msg.sender]

IRs:
REF_2(uint256) -> balance[msg.sender]
previousBalance(uint256) := REF_2(uint256)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
balance[msg.sender] = previousBalance - amount

IRs:
REF_3(uint256) -> balance[msg.sender]
TMP_4(uint256) = previousBalance - amount
REF_3(uint256) (->balance) := TMP_4(uint256)"];
3->4;
4[label="Node Type: NEW VARIABLE 4
"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
(success,None) = msg.sender.call.value(amount)()

IRs:
TUPLE_0(bool,bytes) = LOW_LEVEL_CALL, dest:msg.sender, function:call, arguments:[''] value:amount 
success(bool)= UNPACK TUPLE_0 index: 0 "];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
require(bool,string)(success,transfer failed)

IRs:
TMP_6(None) = SOLIDITY_CALL require(bool,string)(success,transfer failed)"];
}
