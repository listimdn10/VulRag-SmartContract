digraph CFG {
0[label="Node Type: ENTRY_POINT 0
"];
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
bhash = blockhash(uint256)(0)

IRs:
TMP_0(uint256) = SOLIDITY_CALL blockhash(uint256)(0)
bhash(bytes32) := TMP_0(uint256)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
hashofhash = keccak256()(bhash)

IRs:
TMP_1(bytes32) = SOLIDITY_CALL keccak256()(bhash)
hashofhash(bytes32) := TMP_1(bytes32)"];
2->3;
3[label="Node Type: NEW VARIABLE 3

EXPRESSION:
gas = gasleft()()

IRs:
TMP_2(uint256) = SOLIDITY_CALL gasleft()()
gas(uint256) := TMP_2(uint256)"];
3->4;
4[label="Node Type: IF 4

EXPRESSION:
gas == 0

IRs:
TMP_3(bool) = gas == 0
CONDITION TMP_3"];
4->5[label="True"];
4->6[label="False"];
5[label="Node Type: EXPRESSION 5

EXPRESSION:
revert()()

IRs:
TMP_4(None) = SOLIDITY_CALL revert()()"];
5->6;
6[label="Node Type: END_IF 6
"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
address(this).delegatecall()

IRs:
TMP_5 = CONVERT this to address
TMP_6(bool) = LOW_LEVEL_CALL, dest:TMP_5, function:delegatecall, arguments:[]  "];
7->8;
8[label="Node Type: NEW VARIABLE 8

EXPRESSION:
a = (1,2,3)

IRs:
a(uint8[3]) = ['1(uint256)', '2(uint256)', '3(uint256)']"];
8->9;
9[label="Node Type: NEW VARIABLE 9

EXPRESSION:
x = false

IRs:
x(bool) := False(bool)"];
9->10;
10[label="Node Type: NEW VARIABLE 10

EXPRESSION:
y = test

IRs:
y(string) := test(string)"];
10->11;
11[label="Node Type: NEW VARIABLE 11

EXPRESSION:
z = 0

IRs:
z(uint8) := 0(uint256)"];
11->12;
12[label="Node Type: EXPRESSION 12

EXPRESSION:
selfdestruct(address)(address(0))

IRs:
TMP_7 = CONVERT 0 to address
TMP_8(None) = SOLIDITY_CALL selfdestruct(address)(TMP_7)"];
}
