digraph CFG {
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool,string)(msg.value == 1000000000000000000,msg.value must be 1 eth)

IRs:
TMP_0(bool) = msg.value == 1000000000000000000
TMP_1(None) = SOLIDITY_CALL require(bool,string)(TMP_0,msg.value must be 1 eth)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
players[count] = Player(msg.sender,number)

IRs:
REF_0(OddEven.Player) -> players[count]
TMP_2(OddEven.Player) = new Player(msg.sender,number)
REF_0(OddEven.Player) (->players) := TMP_2(OddEven.Player)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
count ++

IRs:
TMP_3(uint256) := count(uint256)
count(uint256) = count + 1"];
3->4;
4[label="Node Type: IF 4

EXPRESSION:
count == 2

IRs:
TMP_4(bool) = count == 2
CONDITION TMP_4"];
4->5[label="True"];
4->6[label="False"];
5[label="Node Type: EXPRESSION 5

EXPRESSION:
selectWinner()

IRs:
INTERNAL_CALL, OddEven.selectWinner()()"];
5->6;
6[label="Node Type: END_IF 6
"];
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
n = players[0].number + players[1].number

IRs:
REF_1(OddEven.Player) -> players[0]
REF_2(uint256) -> REF_1.number
REF_3(OddEven.Player) -> players[1]
REF_4(uint256) -> REF_3.number
TMP_6(uint256) = REF_2 + REF_4
n(uint256) := TMP_6(uint256)"];
1->2;
2[label="Node Type: NEW VARIABLE 2
"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
(success,None) = players[n % 2].addr.call.value(address(this).balance)()

IRs:
TMP_7(uint256) = n % 2
REF_5(OddEven.Player) -> players[TMP_7]
REF_6(address) -> REF_5.addr
TMP_8 = CONVERT this to address
TMP_9(uint256) = SOLIDITY_CALL balance(address)(TMP_8)
TUPLE_0(bool,bytes) = LOW_LEVEL_CALL, dest:REF_6, function:call, arguments:[''] value:TMP_9 
success(bool)= UNPACK TUPLE_0 index: 0 "];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
require(bool,string)(success,transfer failed)

IRs:
TMP_11(None) = SOLIDITY_CALL require(bool,string)(success,transfer failed)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
delete players

IRs:
players = delete players "];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
count = 0

IRs:
count(uint256) := 0(uint256)"];
0[label="Node Type: OTHER_ENTRYPOINT 0

EXPRESSION:
count = 0

IRs:
count(uint256) := 0(uint256)"];
}
