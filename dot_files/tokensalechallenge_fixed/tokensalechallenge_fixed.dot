digraph CFG {
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
a == 0

IRs:
TMP_0(bool) = a == 0
CONDITION TMP_0"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: RETURN 2

EXPRESSION:
0

IRs:
RETURN 0"];
3[label="Node Type: END_IF 3
"];
3->4;
4[label="Node Type: NEW VARIABLE 4

EXPRESSION:
c = a * b

IRs:
TMP_1(uint256) = a * b
c(uint256) := TMP_1(uint256)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
require(bool)(c / a == b)

IRs:
TMP_2(uint256) = c / a
TMP_3(bool) = TMP_2 == b
TMP_4(None) = SOLIDITY_CALL require(bool)(TMP_3)"];
5->6;
6[label="Node Type: RETURN 6

EXPRESSION:
c

IRs:
RETURN c"];
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
requiredValue = numTokens.mul(PRICE_PER_TOKEN)

IRs:
TMP_10(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['numTokens', 'PRICE_PER_TOKEN'] 
requiredValue(uint256) := TMP_10(uint256)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool)(msg.value == requiredValue)

IRs:
TMP_11(bool) = msg.value == requiredValue
TMP_12(None) = SOLIDITY_CALL require(bool)(TMP_11)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
balanceOf[msg.sender] += numTokens

IRs:
REF_1(uint256) -> balanceOf[msg.sender]
REF_1(-> balanceOf) = REF_1 + numTokens"];
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
address(this).balance < 1000000000000000000

IRs:
TMP_7 = CONVERT this to address
TMP_8(uint256) = SOLIDITY_CALL balance(address)(TMP_7)
TMP_9(bool) = TMP_8 < 1000000000000000000
RETURN TMP_9"];
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(balanceOf[msg.sender] >= numTokens)

IRs:
REF_2(uint256) -> balanceOf[msg.sender]
TMP_13(bool) = REF_2 >= numTokens
TMP_14(None) = SOLIDITY_CALL require(bool)(TMP_13)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
balanceOf[msg.sender] -= numTokens

IRs:
REF_3(uint256) -> balanceOf[msg.sender]
REF_3(-> balanceOf) = REF_3 - numTokens"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
msg.sender.transfer(numTokens.mul(PRICE_PER_TOKEN))

IRs:
TMP_15(uint256) = LIBRARY_CALL, dest:SafeMath, function:SafeMath.mul(uint256,uint256), arguments:['numTokens', 'PRICE_PER_TOKEN'] 
Transfer dest:msg.sender value:TMP_15"];
0[label="Node Type: OTHER_ENTRYPOINT 0

EXPRESSION:
PRICE_PER_TOKEN = 1000000000000000000

IRs:
PRICE_PER_TOKEN(uint256) := 1000000000000000000(uint256)"];
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.value == 1000000000000000000)

IRs:
TMP_5(bool) = msg.value == 1000000000000000000
TMP_6(None) = SOLIDITY_CALL require(bool)(TMP_5)"];
}
