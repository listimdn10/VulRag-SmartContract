digraph CFG {
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: RETURN 1

EXPRESSION:
keccak256(bytes)(abi.encodePacked(Nu Token))

IRs:
TMP_11(bytes) = SOLIDITY_CALL abi.encodePacked()(Nu Token)
TMP_12(bytes32) = SOLIDITY_CALL keccak256(bytes)(TMP_11)
RETURN TMP_12"];
0[label="Node Type: ENTRY_POINT 0
"];
0->2;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
tokenBalance[msg.sender] += 20

IRs:
REF_0(uint256) -> tokenBalance[msg.sender]
REF_0(-> tokenBalance) = REF_0 + 20"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
hasNoBalance()

IRs:
MODIFIER_CALL, ModifierEntrancy.hasNoBalance()()"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
supportsToken()

IRs:
MODIFIER_CALL, ModifierEntrancy.supportsToken()()"];
3->1;
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
bank = new Bank()

IRs:
TMP_1(Bank) = new Bank() 
bank(Bank) := TMP_1(Bank)"];
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(tokenBalance[msg.sender] == 0)

IRs:
REF_3(uint256) -> tokenBalance[msg.sender]
TMP_9(bool) = REF_3 == 0
TMP_10(None) = SOLIDITY_CALL require(bool)(TMP_9)"];
1->2;
2[label="Node Type: _ 2
"];
0[label="Node Type: OTHER_ENTRYPOINT 0

EXPRESSION:
name = Nu Token

IRs:
name(string) := Nu Token(string)"];
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(keccak256(bytes)(abi.encodePacked(Nu Token)) == bank.supportsToken())

IRs:
TMP_4(bytes) = SOLIDITY_CALL abi.encodePacked()(Nu Token)
TMP_5(bytes32) = SOLIDITY_CALL keccak256(bytes)(TMP_4)
TMP_6(bytes32) = HIGH_LEVEL_CALL, dest:bank(Bank), function:supportsToken, arguments:[]  
TMP_7(bool) = TMP_5 == TMP_6
TMP_8(None) = SOLIDITY_CALL require(bool)(TMP_7)"];
1->2;
2[label="Node Type: _ 2
"];
}
