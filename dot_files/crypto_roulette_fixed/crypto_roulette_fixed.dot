digraph CFG {
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
ownerAddr = msg.sender

IRs:
ownerAddr(address) := msg.sender(address)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
shuffle()

IRs:
INTERNAL_CALL, CryptoRoulette.shuffle()()"];
0[label="Node Type: ENTRY_POINT 0
"];
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: IF 1

EXPRESSION:
msg.sender == ownerAddr && now > lastPlayed + 86400

IRs:
TMP_17(bool) = msg.sender == ownerAddr
TMP_18(uint256) = lastPlayed + 86400
TMP_19(bool) = now > TMP_18
TMP_20(bool) = TMP_17 && TMP_19
CONDITION TMP_20"];
1->2[label="True"];
1->3[label="False"];
2[label="Node Type: EXPRESSION 2

EXPRESSION:
suicide(address)(msg.sender)

IRs:
TMP_21(None) = SOLIDITY_CALL suicide(address)(msg.sender)"];
2->3;
3[label="Node Type: END_IF 3
"];
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool)(msg.value >= betPrice && number <= 10)

IRs:
TMP_7(bool) = msg.value >= betPrice
TMP_8(bool) = number <= 10
TMP_9(bool) = TMP_7 && TMP_8
TMP_10(None) = SOLIDITY_CALL require(bool)(TMP_9)"];
1->2;
2[label="Node Type: NEW VARIABLE 2
"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
game.player = msg.sender

IRs:
REF_0(address) -> game.player
REF_0(address) (->game) := msg.sender(address)"];
3->4;
4[label="Node Type: EXPRESSION 4

EXPRESSION:
game.number = number

IRs:
REF_1(uint256) -> game.number
REF_1(uint256) (->game) := number(uint256)"];
4->5;
5[label="Node Type: EXPRESSION 5

EXPRESSION:
gamesPlayed.push(game)

IRs:
REF_3 -> LENGTH gamesPlayed
TMP_12(uint256) := REF_3(uint256)
TMP_13(uint256) = TMP_12 + 1
REF_3(uint256) (->gamesPlayed) := TMP_13(uint256)
REF_4(CryptoRoulette.Game) -> gamesPlayed[TMP_12]
REF_4(CryptoRoulette.Game) (->gamesPlayed) := game(CryptoRoulette.Game)"];
5->6;
6[label="Node Type: IF 6

EXPRESSION:
number == secretNumber

IRs:
TMP_14(bool) = number == secretNumber
CONDITION TMP_14"];
6->7[label="True"];
6->8[label="False"];
7[label="Node Type: EXPRESSION 7

EXPRESSION:
msg.sender.transfer(this.balance)

IRs:
REF_6(uint256) = SOLIDITY_CALL balance(address)(this)
Transfer dest:msg.sender value:REF_6"];
7->8;
8[label="Node Type: END_IF 8
"];
8->9;
9[label="Node Type: EXPRESSION 9

EXPRESSION:
shuffle()

IRs:
INTERNAL_CALL, CryptoRoulette.shuffle()()"];
9->10;
10[label="Node Type: EXPRESSION 10

EXPRESSION:
lastPlayed = now

IRs:
lastPlayed(uint256) := now(uint256)"];
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
secretNumber = uint8(sha3()(now,block.blockhash(block.number - 1))) % 20 + 1

IRs:
TMP_1(uint256) = block.number - 1
TMP_2(uint256) = SOLIDITY_CALL blockhash(uint256)(TMP_1)
TMP_3(bytes32) = SOLIDITY_CALL sha3()(now,TMP_2)
TMP_4 = CONVERT TMP_3 to uint8
TMP_5(uint8) = TMP_4 % 20
TMP_6(uint8) = TMP_5 + 1
secretNumber(uint256) := TMP_6(uint8)"];
0[label="Node Type: OTHER_ENTRYPOINT 0

EXPRESSION:
betPrice = 100000000000000000

IRs:
betPrice(uint256) := 100000000000000000(uint256)"];
}
