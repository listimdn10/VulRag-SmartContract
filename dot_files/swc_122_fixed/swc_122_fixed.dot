digraph CFG {
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool,string)(signature.length == 65,Invalid signature length)

IRs:
REF_1 -> LENGTH signature
TMP_4(bool) = REF_1 == 65
TMP_5(None) = SOLIDITY_CALL require(bool,string)(TMP_4,Invalid signature length)"];
1->2;
2[label="Node Type: NEW VARIABLE 2
"];
2->3;
3[label="Node Type: NEW VARIABLE 3
"];
3->4;
4[label="Node Type: NEW VARIABLE 4
"];
4->5;
5[label="Node Type: INLINE ASM 5
"];
5->6;
6[label="Node Type: EXPRESSION 6

EXPRESSION:
r = mload(uint256)(signature + 32)

IRs:
TMP_6(bytes) = signature + 32
TMP_7(uint256) = SOLIDITY_CALL mload(uint256)(TMP_6)
r(bytes32) := TMP_7(uint256)"];
6->7;
7[label="Node Type: EXPRESSION 7

EXPRESSION:
s = mload(uint256)(signature + 64)

IRs:
TMP_8(bytes) = signature + 64
TMP_9(uint256) = SOLIDITY_CALL mload(uint256)(TMP_8)
s(bytes32) := TMP_9(uint256)"];
7->8;
8[label="Node Type: EXPRESSION 8

EXPRESSION:
v = byte(uint256,uint256)(0,mload(uint256)(signature + 96))

IRs:
TMP_10(bytes) = signature + 96
TMP_11(uint256) = SOLIDITY_CALL mload(uint256)(TMP_10)
TMP_12(uint256) = SOLIDITY_CALL byte(uint256,uint256)(0,TMP_11)
v(uint8) := TMP_12(uint256)"];
8->9;
9[label="Node Type: END INLINE ASM 9
"];
9->10;
10[label="Node Type: IF 10

EXPRESSION:
v < 27

IRs:
TMP_13(bool) = v < 27
CONDITION TMP_13"];
10->11[label="True"];
10->12[label="False"];
11[label="Node Type: EXPRESSION 11

EXPRESSION:
v += 27

IRs:
v(uint8) = v (c)+ 27"];
11->12;
12[label="Node Type: END_IF 12
"];
12->13;
13[label="Node Type: EXPRESSION 13

EXPRESSION:
require(bool,string)(v == 27 || v == 28,Invalid signature version)

IRs:
TMP_14(bool) = v == 27
TMP_15(bool) = v == 28
TMP_16(bool) = TMP_14 || TMP_15
TMP_17(None) = SOLIDITY_CALL require(bool,string)(TMP_16,Invalid signature version)"];
13->14;
14[label="Node Type: RETURN 14

EXPRESSION:
ecrecover(bytes32,uint8,bytes32,bytes32)(hash,v,r,s)

IRs:
TMP_18(address) = SOLIDITY_CALL ecrecover(bytes32,uint8,bytes32,bytes32)(hash,v,r,s)
RETURN TMP_18"];
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
signer = recoverSigner(hash,signature)

IRs:
TMP_0(address) = INTERNAL_CALL, SecureContract.recoverSigner(bytes32,bytes)(hash,signature)
signer(address) := TMP_0(address)"];
1->2;
2[label="Node Type: EXPRESSION 2

EXPRESSION:
require(bool,string)(signer != address(0),Invalid signature)

IRs:
TMP_1 = CONVERT 0 to address
TMP_2(bool) = signer != TMP_1
TMP_3(None) = SOLIDITY_CALL require(bool,string)(TMP_2,Invalid signature)"];
2->3;
3[label="Node Type: EXPRESSION 3

EXPRESSION:
authorizedUsers[signer] = true

IRs:
REF_0(bool) -> authorizedUsers[signer]
REF_0(bool) (->authorizedUsers) := True(bool)"];
}
