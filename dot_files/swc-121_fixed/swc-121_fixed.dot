digraph CFG {
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
owner = msg.sender

IRs:
owner(address) := msg.sender(address)"];
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: EXPRESSION 1

EXPRESSION:
require(bool,string)(! usedHashes[messageHash],Replay attack detected!)

IRs:
REF_0(bool) -> usedHashes[messageHash]
TMP_0 = UnaryType.BANG REF_0 
TMP_1(None) = SOLIDITY_CALL require(bool,string)(TMP_0,Replay attack detected!)"];
1->2;
2[label="Node Type: NEW VARIABLE 2

EXPRESSION:
prefixedHash = keccak256(bytes)(abi.encodePacked(address(this),messageHash))

IRs:
TMP_2 = CONVERT this to address
TMP_3(bytes) = SOLIDITY_CALL abi.encodePacked()(TMP_2,messageHash)
TMP_4(bytes32) = SOLIDITY_CALL keccak256(bytes)(TMP_3)
prefixedHash(bytes32) := TMP_4(bytes32)"];
2->3;
3[label="Node Type: NEW VARIABLE 3

EXPRESSION:
signer = ecrecover(bytes32,uint8,bytes32,bytes32)(prefixedHash,v,r,s)

IRs:
TMP_5(address) = SOLIDITY_CALL ecrecover(bytes32,uint8,bytes32,bytes32)(prefixedHash,v,r,s)
signer(address) := TMP_5(address)"];
3->4;
4[label="Node Type: IF 4

EXPRESSION:
signer == owner

IRs:
TMP_6(bool) = signer == owner
CONDITION TMP_6"];
4->5[label="True"];
4->7[label="False"];
5[label="Node Type: EXPRESSION 5

EXPRESSION:
usedHashes[messageHash] = true

IRs:
REF_2(bool) -> usedHashes[messageHash]
REF_2(bool) (->usedHashes) := True(bool)"];
5->6;
6[label="Node Type: RETURN 6

EXPRESSION:
true

IRs:
RETURN True"];
7[label="Node Type: END_IF 7
"];
7->8;
8[label="Node Type: RETURN 8

EXPRESSION:
false

IRs:
RETURN False"];
}
